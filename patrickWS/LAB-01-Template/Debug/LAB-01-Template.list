
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800327c  0800327c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800327c  0800327c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000068  080032ec  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000108  080032ec  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b27  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a2  00000000  00000000  00032bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000393a  00000000  00000000  0003545f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007e0  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000858  00000000  00000000  00039580  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002cc99  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ad70  00000000  00000000  00066a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00103d94  00000000  00000000  000717e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00175575  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ba4  00000000  00000000  001755f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  00177194  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00177200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800308c 	.word	0x0800308c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800308c 	.word	0x0800308c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <ANSI_SetCursor>:
{
	uint32_t col = (ANSI_MAX_COL-strlen(str))/2 + 1;
	ANSI_WriteAt(row, col, str);
}
void ANSI_SetCursor(uint32_t row, uint32_t col)
{
 80002f0:	b508      	push	{r3, lr}
	printf(ANSI_ESC"%lu;%luH",row,col);
 80002f2:	460a      	mov	r2, r1
 80002f4:	4601      	mov	r1, r0
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <ANSI_SetCursor+0x10>)
 80002f8:	f002 f92e 	bl	8002558 <iprintf>
}
 80002fc:	bd08      	pop	{r3, pc}
 80002fe:	bf00      	nop
 8000300:	080030bc 	.word	0x080030bc

08000304 <ANSI_WriteAt>:
{
 8000304:	b510      	push	{r4, lr}
 8000306:	4614      	mov	r4, r2
	ANSI_SetCursor(row, col);
 8000308:	f7ff fff2 	bl	80002f0 <ANSI_SetCursor>
	fputs(str,stdout);
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <ANSI_WriteAt+0x18>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6899      	ldr	r1, [r3, #8]
 8000312:	4620      	mov	r0, r4
 8000314:	f001 ffca 	bl	80022ac <fputs>
}
 8000318:	bd10      	pop	{r4, pc}
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004

08000320 <ANSI_WriteCenter>:
{
 8000320:	b538      	push	{r3, r4, r5, lr}
 8000322:	4605      	mov	r5, r0
 8000324:	460c      	mov	r4, r1
	uint32_t col = (ANSI_MAX_COL-strlen(str))/2 + 1;
 8000326:	4608      	mov	r0, r1
 8000328:	f7ff ff8a 	bl	8000240 <strlen>
 800032c:	f1c0 0150 	rsb	r1, r0, #80	; 0x50
 8000330:	0849      	lsrs	r1, r1, #1
	ANSI_WriteAt(row, col, str);
 8000332:	4622      	mov	r2, r4
 8000334:	3101      	adds	r1, #1
 8000336:	4628      	mov	r0, r5
 8000338:	f7ff ffe4 	bl	8000304 <ANSI_WriteAt>
}
 800033c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000340 <ANSI_HomeCursor>:
void ANSI_HomeCursor()
{
 8000340:	b508      	push	{r3, lr}
	ANSI_print(ANSI_ESC "H");
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <ANSI_HomeCursor+0x14>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	2203      	movs	r2, #3
 800034a:	2101      	movs	r1, #1
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <ANSI_HomeCursor+0x18>)
 800034e:	f002 f821 	bl	8002394 <fwrite>
}
 8000352:	bd08      	pop	{r3, pc}
 8000354:	20000004 	.word	0x20000004
 8000358:	080030c8 	.word	0x080030c8

0800035c <ANSI_SaveCursor>:
void ANSI_CursorLeft(uint32_t dist)
{
	printf(ANSI_ESC "%luD",dist);
}
void ANSI_SaveCursor()
{
 800035c:	b508      	push	{r3, lr}
	ANSI_print(ANSI_ESC "s");
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <ANSI_SaveCursor+0x14>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	2203      	movs	r2, #3
 8000366:	2101      	movs	r1, #1
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <ANSI_SaveCursor+0x18>)
 800036a:	f002 f813 	bl	8002394 <fwrite>
}
 800036e:	bd08      	pop	{r3, pc}
 8000370:	20000004 	.word	0x20000004
 8000374:	080030ec 	.word	0x080030ec

08000378 <ANSI_RestoreCursor>:
void ANSI_RestoreCursor()
{
 8000378:	b508      	push	{r3, lr}
	ANSI_print(ANSI_ESC "u");
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <ANSI_RestoreCursor+0x14>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	2203      	movs	r2, #3
 8000382:	2101      	movs	r1, #1
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <ANSI_RestoreCursor+0x18>)
 8000386:	f002 f805 	bl	8002394 <fwrite>
}
 800038a:	bd08      	pop	{r3, pc}
 800038c:	20000004 	.word	0x20000004
 8000390:	080030f0 	.word	0x080030f0

08000394 <ANSI_ClearScreen>:
void ANSI_ClearScreen()
{
 8000394:	b508      	push	{r3, lr}
	ANSI_print(ANSI_ESC "2J");
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <ANSI_ClearScreen+0x14>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	2204      	movs	r2, #4
 800039e:	2101      	movs	r1, #1
 80003a0:	4802      	ldr	r0, [pc, #8]	; (80003ac <ANSI_ClearScreen+0x18>)
 80003a2:	f001 fff7 	bl	8002394 <fwrite>
}
 80003a6:	bd08      	pop	{r3, pc}
 80003a8:	20000004 	.word	0x20000004
 80003ac:	080030f4 	.word	0x080030f4

080003b0 <ANSI_TextFormat>:
void ANSI_ScrollAll()
{
	ANSI_print(ANSI_ESC "r");
}
void ANSI_TextFormat(uint32_t len, ANSI_text_format_t first, ...)
{
 80003b0:	b40e      	push	{r1, r2, r3}
 80003b2:	b530      	push	{r4, r5, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	4605      	mov	r5, r0
 80003b8:	ab05      	add	r3, sp, #20
 80003ba:	f813 1b04 	ldrb.w	r1, [r3], #4
	va_list argp;
	va_start(argp, first);
 80003be:	9301      	str	r3, [sp, #4]
	printf(ANSI_ESC"%u",first);
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <ANSI_TextFormat+0x40>)
 80003c2:	f002 f8c9 	bl	8002558 <iprintf>
	for(uint32_t i = 1; i < len; ++i)
 80003c6:	2401      	movs	r4, #1
 80003c8:	e007      	b.n	80003da <ANSI_TextFormat+0x2a>
	{
		int val = va_arg(argp, int);
 80003ca:	9b01      	ldr	r3, [sp, #4]
 80003cc:	1d1a      	adds	r2, r3, #4
 80003ce:	9201      	str	r2, [sp, #4]
		printf(";%d", val);
 80003d0:	6819      	ldr	r1, [r3, #0]
 80003d2:	4808      	ldr	r0, [pc, #32]	; (80003f4 <ANSI_TextFormat+0x44>)
 80003d4:	f002 f8c0 	bl	8002558 <iprintf>
	for(uint32_t i = 1; i < len; ++i)
 80003d8:	3401      	adds	r4, #1
 80003da:	42ac      	cmp	r4, r5
 80003dc:	d3f5      	bcc.n	80003ca <ANSI_TextFormat+0x1a>
	}
	va_end(argp);
	putchar('m');
 80003de:	206d      	movs	r0, #109	; 0x6d
 80003e0:	f002 f8d2 	bl	8002588 <putchar>
}
 80003e4:	b002      	add	sp, #8
 80003e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80003ea:	b003      	add	sp, #12
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	08003120 	.word	0x08003120
 80003f4:	08003128 	.word	0x08003128

080003f8 <ANSI_SetScreenMode>:
void ANSI_SetScreenMode(ANSI_screen_mode_t mode)
{
 80003f8:	b508      	push	{r3, lr}
	printf(ANSI_ESC "=%uh",mode);
 80003fa:	4601      	mov	r1, r0
 80003fc:	4801      	ldr	r0, [pc, #4]	; (8000404 <ANSI_SetScreenMode+0xc>)
 80003fe:	f002 f8ab 	bl	8002558 <iprintf>
}
 8000402:	bd08      	pop	{r3, pc}
 8000404:	0800312c 	.word	0x0800312c

08000408 <ANSI_ResetScreenMode>:
void ANSI_ResetScreenMode(ANSI_screen_mode_t mode)
{
 8000408:	b508      	push	{r3, lr}
	printf(ANSI_ESC "=%ul",mode);
 800040a:	4601      	mov	r1, r0
 800040c:	4801      	ldr	r0, [pc, #4]	; (8000414 <ANSI_ResetScreenMode+0xc>)
 800040e:	f002 f8a3 	bl	8002558 <iprintf>
}
 8000412:	bd08      	pop	{r3, pc}
 8000414:	08003134 	.word	0x08003134

08000418 <COORD_random_dir>:
#include "coord.h"
#include <string.h>
#include <stdlib.h>

uint8_t COORD_random_dir()
{
 8000418:	b508      	push	{r3, lr}
	return (1<<(rand()%4));
 800041a:	f002 f8ed 	bl	80025f8 <rand>
 800041e:	4243      	negs	r3, r0
 8000420:	f000 0003 	and.w	r0, r0, #3
 8000424:	f003 0303 	and.w	r3, r3, #3
 8000428:	bf58      	it	pl
 800042a:	4258      	negpl	r0, r3
 800042c:	2301      	movs	r3, #1
 800042e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8000432:	b2c0      	uxtb	r0, r0
 8000434:	bd08      	pop	{r3, pc}

08000436 <COORD_opposite_dir>:
	return result;
}

dir_t COORD_opposite_dir(dir_t original)
{
	dir_t result = (original & 0xF) << 2;
 8000436:	0080      	lsls	r0, r0, #2
 8000438:	b2c3      	uxtb	r3, r0
 800043a:	f003 003c 	and.w	r0, r3, #60	; 0x3c
	if(result&0xF0) result >>= 4;
 800043e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000442:	d000      	beq.n	8000446 <COORD_opposite_dir+0x10>
 8000444:	0900      	lsrs	r0, r0, #4
	return result;
}
 8000446:	4770      	bx	lr

08000448 <COORD_move_dir>:
	if(result&0xF0) result >>= 4;
	return result;
}

coord_t COORD_move_dir(coord_t start, dir_t dir)
{
 8000448:	b084      	sub	sp, #16
	coord_t new;
	memcpy(&new, &start, sizeof(coord_t));
 800044a:	9002      	str	r0, [sp, #8]

	if(dir&DIR_UP) --new.row;
 800044c:	f011 0f08 	tst.w	r1, #8
 8000450:	d002      	beq.n	8000458 <COORD_move_dir+0x10>
 8000452:	1e43      	subs	r3, r0, #1
 8000454:	f8ad 3008 	strh.w	r3, [sp, #8]
	if(dir&DIR_RIGHT) ++new.col;
 8000458:	f011 0f04 	tst.w	r1, #4
 800045c:	d004      	beq.n	8000468 <COORD_move_dir+0x20>
 800045e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8000462:	3001      	adds	r0, #1
 8000464:	f8ad 000a 	strh.w	r0, [sp, #10]
	if(dir&DIR_DOWN) ++new.row;
 8000468:	f011 0f02 	tst.w	r1, #2
 800046c:	d004      	beq.n	8000478 <COORD_move_dir+0x30>
 800046e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8000472:	3301      	adds	r3, #1
 8000474:	f8ad 3008 	strh.w	r3, [sp, #8]
	if(dir&DIR_LEFT) --new.col;
 8000478:	f011 0f01 	tst.w	r1, #1
 800047c:	d004      	beq.n	8000488 <COORD_move_dir+0x40>
 800047e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000482:	3b01      	subs	r3, #1
 8000484:	f8ad 300a 	strh.w	r3, [sp, #10]

	return new;
 8000488:	9b02      	ldr	r3, [sp, #8]
 800048a:	2000      	movs	r0, #0
 800048c:	b29a      	uxth	r2, r3
 800048e:	f362 000f 	bfi	r0, r2, #0, #16
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000498:	b004      	add	sp, #16
 800049a:	4770      	bx	lr

0800049c <COORD_in_square>:
{
	return (c1.row==c2.row) && (c1.col==c2.col);
}

bool COORD_in_square(coord_t c, uint8_t size)
{
 800049c:	b082      	sub	sp, #8
 800049e:	9001      	str	r0, [sp, #4]
	return (c.col < size) && (c.row < size);
 80004a0:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 80004a4:	d905      	bls.n	80004b2 <COORD_in_square+0x16>
 80004a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d804      	bhi.n	80004b8 <COORD_in_square+0x1c>
 80004ae:	2000      	movs	r0, #0
 80004b0:	e000      	b.n	80004b4 <COORD_in_square+0x18>
 80004b2:	2000      	movs	r0, #0
}
 80004b4:	b002      	add	sp, #8
 80004b6:	4770      	bx	lr
	return (c.col < size) && (c.row < size);
 80004b8:	2001      	movs	r0, #1
 80004ba:	e7fb      	b.n	80004b4 <COORD_in_square+0x18>

080004bc <COORD_to_index>:

uint32_t COORD_to_index(coord_t loc, uint32_t row_size)
{
 80004bc:	b082      	sub	sp, #8
	return loc.row*row_size + loc.col;
 80004be:	b283      	uxth	r3, r0
 80004c0:	0c00      	lsrs	r0, r0, #16
}
 80004c2:	fb01 0003 	mla	r0, r1, r3, r0
 80004c6:	b002      	add	sp, #8
 80004c8:	4770      	bx	lr
	...

080004cc <GPIO_Init>:
 */
#include "gpio.h"

void GPIO_Init()
{
	RCC->AHB1ENR |= // Configure the GPIO per
 80004cc:	4a12      	ldr	r2, [pc, #72]	; (8000518 <GPIO_Init+0x4c>)
 80004ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80004d0:	f240 232d 	movw	r3, #557	; 0x22d
 80004d4:	430b      	orrs	r3, r1
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
			RCC_AHB1LPENR_GPIOJLPEN |
			RCC_AHB1LPENR_GPIOALPEN |
			RCC_AHB1LPENR_GPIODLPEN |
			RCC_AHB1LPENR_GPIOFLPEN |
			RCC_AHB1LPENR_GPIOCLPEN;
	GPIOJ->MODER |= GPIO_MODER_MODER13_0 | GPIO_MODER_MODER5_0;
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <GPIO_Init+0x50>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f042 2204 	orr.w	r2, r2, #67109888	; 0x4000400
 80004e0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER12_0;
 80004e2:	490f      	ldr	r1, [pc, #60]	; (8000520 <GPIO_Init+0x54>)
 80004e4:	680a      	ldr	r2, [r1, #0]
 80004e6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004ea:	600a      	str	r2, [r1, #0]
	GPIOD->MODER |= GPIO_MODER_MODER4_0;
 80004ec:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80004f0:	680a      	ldr	r2, [r1, #0]
 80004f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004f6:	600a      	str	r2, [r1, #0]

	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR7_0 | GPIO_PUPDR_PUPDR6_0;
 80004f8:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80004fc:	68ca      	ldr	r2, [r1, #12]
 80004fe:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 8000502:	60ca      	str	r2, [r1, #12]
	GPIOJ->PUPDR |= GPIO_PUPDR_PUPDR1_0;
 8000504:	68da      	ldr	r2, [r3, #12]
 8000506:	f042 0204 	orr.w	r2, r2, #4
 800050a:	60da      	str	r2, [r3, #12]
	GPIOF->PUPDR |= GPIO_PUPDR_PUPDR6_0;
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <GPIO_Init+0x58>)
 800050e:	68d3      	ldr	r3, [r2, #12]
 8000510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000514:	60d3      	str	r3, [r2, #12]
}
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800
 800051c:	40022400 	.word	0x40022400
 8000520:	40020000 	.word	0x40020000
 8000524:	40021400 	.word	0x40021400

08000528 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000528:	b500      	push	{lr}
 800052a:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000534:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800053e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000540:	2219      	movs	r2, #25
 8000542:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000544:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000548:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800054c:	2309      	movs	r3, #9
 800054e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000550:	2307      	movs	r3, #7
 8000552:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000554:	4668      	mov	r0, sp
 8000556:	f000 fdb7 	bl	80010c8 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800055a:	b100      	cbz	r0, 800055e <SystemClock_Config+0x36>
 800055c:	e7fe      	b.n	800055c <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800055e:	f000 fd75 	bl	800104c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000562:	b100      	cbz	r0, 8000566 <SystemClock_Config+0x3e>
 8000564:	e7fe      	b.n	8000564 <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000566:	230f      	movs	r3, #15
 8000568:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2302      	movs	r3, #2
 800056c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000576:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800057e:	2107      	movs	r1, #7
 8000580:	a80d      	add	r0, sp, #52	; 0x34
 8000582:	f000 fff9 	bl	8001578 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8000586:	b100      	cbz	r0, 800058a <SystemClock_Config+0x62>
 8000588:	e7fe      	b.n	8000588 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 800058a:	b013      	add	sp, #76	; 0x4c
 800058c:	f85d fb04 	ldr.w	pc, [sp], #4

08000590 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000590:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000596:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <CPU_CACHE_Enable+0x74>)
 800059c:	2100      	movs	r1, #0
 800059e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005a8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 80005b2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005be:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80005c2:	e00f      	b.n	80005e4 <CPU_CACHE_Enable+0x54>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 80005c4:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005ca:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80005ce:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <CPU_CACHE_Enable+0x74>)
 80005d4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 80005d8:	1e53      	subs	r3, r2, #1
 80005da:	2a00      	cmp	r2, #0
 80005dc:	d1f2      	bne.n	80005c4 <CPU_CACHE_Enable+0x34>
    } while(sets--);
 80005de:	1e43      	subs	r3, r0, #1
 80005e0:	b118      	cbz	r0, 80005ea <CPU_CACHE_Enable+0x5a>
 80005e2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005e4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80005e8:	e7ed      	b.n	80005c6 <CPU_CACHE_Enable+0x36>
 80005ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ee:	694b      	ldr	r3, [r1, #20]
 80005f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f4:	614b      	str	r3, [r1, #20]
 80005f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80005fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000608:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800060a:	f7ff ffc1 	bl	8000590 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800060e:	f000 fbb1 	bl	8000d74 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000612:	f7ff ff89 	bl	8000528 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000616:	4a03      	ldr	r2, [pc, #12]	; (8000624 <Sys_Init+0x1c>)
 8000618:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <Sys_Init+0x20>)
 800061e:	f000 fb0f 	bl	8000c40 <initUart>
}
 8000622:	bd08      	pop	{r3, pc}
 8000624:	40011000 	.word	0x40011000
 8000628:	20000090 	.word	0x20000090

0800062c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800062c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800062e:	f000 fbb3 	bl	8000d98 <HAL_IncTick>
}
 8000632:	bd08      	pop	{r3, pc}

08000634 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
{
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	b087      	sub	sp, #28
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 8000638:	f7ff ffe6 	bl	8000608 <Sys_Init>
     * Also make sure you use the modified stm32f7xx_hal_conf.h or uncomment #define HAL_RNG_MODULE_ENABLED yourself
     *
     ******************************************************************************************************************/


    GPIO_Init();
 800063c:	f7ff ff46 	bl	80004cc <GPIO_Init>
    LD1Off();LD2Off();LD3Off();LD4Off(); //Turn off all LEDs at startup
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0x74>)
 8000642:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000646:	619a      	str	r2, [r3, #24]
 8000648:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064c:	619a      	str	r2, [r3, #24]
 800064e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	619a      	str	r2, [r3, #24]
 8000658:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800065c:	2210      	movs	r2, #16
 800065e:	619a      	str	r2, [r3, #24]

    RNG_HandleTypeDef rng_handle;
    rng_handle.Instance = RNG;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0x78>)
 8000662:	9303      	str	r3, [sp, #12]
    uint32_t seed = 0;
 8000664:	2500      	movs	r5, #0
 8000666:	9502      	str	r5, [sp, #8]

    // Spin up random number generator just to seed normal PRNG
    // We need a lot of random-ish numbers for the maze gen, and that is faster if we are not waiting on a peripheral for all of them
    __HAL_RCC_RNG_CLK_ENABLE();
 8000668:	4c11      	ldr	r4, [pc, #68]	; (80006b0 <main+0x7c>)
 800066a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6363      	str	r3, [r4, #52]	; 0x34
 8000672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	9b01      	ldr	r3, [sp, #4]
    HAL_RNG_Init(&rng_handle);
 800067c:	a803      	add	r0, sp, #12
 800067e:	f001 f870 	bl	8001762 <HAL_RNG_Init>
    HAL_RNG_GenerateRandomNumber(&rng_handle, &seed);
 8000682:	a902      	add	r1, sp, #8
 8000684:	a803      	add	r0, sp, #12
 8000686:	f001 f8a0 	bl	80017ca <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_DeInit(&rng_handle); // Disable and turn off for those sweet power savings...
 800068a:	a803      	add	r0, sp, #12
 800068c:	f001 f888 	bl	80017a0 <HAL_RNG_DeInit>
    __HAL_RCC_RNG_CLK_DISABLE();
 8000690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000696:	6363      	str	r3, [r4, #52]	; 0x34

    srand(seed);
 8000698:	9802      	ldr	r0, [sp, #8]
 800069a:	f001 ff89 	bl	80025b0 <srand>

    MAZE_RunGame();
 800069e:	f000 f8cd 	bl	800083c <MAZE_RunGame>

#endif
}
 80006a2:	4628      	mov	r0, r5
 80006a4:	b007      	add	sp, #28
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	40022400 	.word	0x40022400
 80006ac:	50060800 	.word	0x50060800
 80006b0:	40023800 	.word	0x40023800

080006b4 <delay_us>:
} maze_t;


void delay_us(uint32_t us)
{
	uint32_t delay = us * 216; // Apparently the loop can be a single instruction, so 216 instruction/us at 216MHz
 80006b4:	23d8      	movs	r3, #216	; 0xd8
 80006b6:	fb03 f000 	mul.w	r0, r3, r0
	while(--delay) asm(""); // asm required to prevent loop from optimizing out
 80006ba:	e7ff      	b.n	80006bc <delay_us+0x8>
 80006bc:	3801      	subs	r0, #1
 80006be:	d1fd      	bne.n	80006bc <delay_us+0x8>
}
 80006c0:	4770      	bx	lr
	...

080006c4 <wait_debounce_release>:

void wait_debounce_release()
{
 80006c4:	b508      	push	{r3, lr}
	delay_us(10*MILLIS);
 80006c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006ca:	f7ff fff3 	bl	80006b4 <delay_us>
	while(SW4Val);
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <wait_debounce_release+0x18>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80006d6:	d1fa      	bne.n	80006ce <wait_debounce_release+0xa>
}
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	40021400 	.word	0x40021400

080006e0 <has_player_won>:

bool has_player_won(const maze_t* state)
{
	return state->player.row==(MAZE_DRAW_SIZE-1);// Player is in bottom row (only non-wall is exit)
 80006e0:	8800      	ldrh	r0, [r0, #0]
}
 80006e2:	2812      	cmp	r0, #18
 80006e4:	bf14      	ite	ne
 80006e6:	2000      	movne	r0, #0
 80006e8:	2001      	moveq	r0, #1
 80006ea:	4770      	bx	lr

080006ec <create_maze>:


void create_maze(maze_t* val)
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	4604      	mov	r4, r0
	MGEN_Generate(val->walls, MAZE_SIZE);
 80006f0:	2109      	movs	r1, #9
 80006f2:	3004      	adds	r0, #4
 80006f4:	f000 fa24 	bl	8000b40 <MGEN_Generate>
	val->player.row = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	8023      	strh	r3, [r4, #0]
	val->player.col = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	8063      	strh	r3, [r4, #2]
	// Find the open start position
	while(val->walls[val->player.col]) {
 8000700:	e001      	b.n	8000706 <create_maze+0x1a>
		val->player.col+=2;
 8000702:	3302      	adds	r3, #2
 8000704:	8063      	strh	r3, [r4, #2]
	while(val->walls[val->player.col]) {
 8000706:	8863      	ldrh	r3, [r4, #2]
 8000708:	18e2      	adds	r2, r4, r3
 800070a:	7912      	ldrb	r2, [r2, #4]
 800070c:	2a00      	cmp	r2, #0
 800070e:	d1f8      	bne.n	8000702 <create_maze+0x16>
	}
}
 8000710:	bd10      	pop	{r4, pc}
	...

08000714 <draw_maze>:

void draw_maze(const maze_t* state)
{
 8000714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000718:	4682      	mov	sl, r0
	ANSI_TextFormat(1,MAZE_WALL_COLOR);
 800071a:	212a      	movs	r1, #42	; 0x2a
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fe47 	bl	80003b0 <ANSI_TextFormat>
	bool isWallColor = true;
	for(uint32_t i=0; i < MAZE_DRAW_SIZE; ++i)
 8000722:	f04f 0900 	mov.w	r9, #0
	bool isWallColor = true;
 8000726:	2601      	movs	r6, #1
	for(uint32_t i=0; i < MAZE_DRAW_SIZE; ++i)
 8000728:	e01f      	b.n	800076a <draw_maze+0x56>
		const bool* row = state->walls + i*MAZE_DRAW_SIZE;
		ANSI_SetCursor(MAZE_ROW_OFF+i,MAZE_COL_OFF);
		for(uint32_t j=0; j < MAZE_DRAW_SIZE; ++j)
		{
			bool wall = row[j];
			if(wall && !isWallColor) ANSI_TextFormat(1,MAZE_WALL_COLOR);
 800072a:	212a      	movs	r1, #42	; 0x2a
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fe3f 	bl	80003b0 <ANSI_TextFormat>
			else if(!wall && isWallColor) ANSI_TextFormat(1,MAZE_PATH_COLOR);
			isWallColor = wall;
			putchar(' '); putchar(' ');
 8000732:	2020      	movs	r0, #32
 8000734:	f001 ff28 	bl	8002588 <putchar>
 8000738:	2020      	movs	r0, #32
 800073a:	f001 ff25 	bl	8002588 <putchar>
		for(uint32_t j=0; j < MAZE_DRAW_SIZE; ++j)
 800073e:	3401      	adds	r4, #1
			isWallColor = wall;
 8000740:	462e      	mov	r6, r5
		for(uint32_t j=0; j < MAZE_DRAW_SIZE; ++j)
 8000742:	2c12      	cmp	r4, #18
 8000744:	d80f      	bhi.n	8000766 <draw_maze+0x52>
			bool wall = row[j];
 8000746:	193b      	adds	r3, r7, r4
 8000748:	f818 5003 	ldrb.w	r5, [r8, r3]
			if(wall && !isWallColor) ANSI_TextFormat(1,MAZE_WALL_COLOR);
 800074c:	f086 0301 	eor.w	r3, r6, #1
 8000750:	422b      	tst	r3, r5
 8000752:	d1ea      	bne.n	800072a <draw_maze+0x16>
			else if(!wall && isWallColor) ANSI_TextFormat(1,MAZE_PATH_COLOR);
 8000754:	f085 0301 	eor.w	r3, r5, #1
 8000758:	4233      	tst	r3, r6
 800075a:	d0ea      	beq.n	8000732 <draw_maze+0x1e>
 800075c:	212b      	movs	r1, #43	; 0x2b
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fe26 	bl	80003b0 <ANSI_TextFormat>
 8000764:	e7e5      	b.n	8000732 <draw_maze+0x1e>
	for(uint32_t i=0; i < MAZE_DRAW_SIZE; ++i)
 8000766:	f109 0901 	add.w	r9, r9, #1
 800076a:	f1b9 0f12 	cmp.w	r9, #18
 800076e:	d80c      	bhi.n	800078a <draw_maze+0x76>
		const bool* row = state->walls + i*MAZE_DRAW_SIZE;
 8000770:	f10a 0804 	add.w	r8, sl, #4
 8000774:	eb09 07c9 	add.w	r7, r9, r9, lsl #3
 8000778:	eb09 0747 	add.w	r7, r9, r7, lsl #1
		ANSI_SetCursor(MAZE_ROW_OFF+i,MAZE_COL_OFF);
 800077c:	2116      	movs	r1, #22
 800077e:	f109 0005 	add.w	r0, r9, #5
 8000782:	f7ff fdb5 	bl	80002f0 <ANSI_SetCursor>
		for(uint32_t j=0; j < MAZE_DRAW_SIZE; ++j)
 8000786:	2400      	movs	r4, #0
 8000788:	e7db      	b.n	8000742 <draw_maze+0x2e>
		}
	}

	ANSI_TextFormat(2, MAZE_PATH_COLOR, ANSI_FORE_BLACK);
 800078a:	221e      	movs	r2, #30
 800078c:	212b      	movs	r1, #43	; 0x2b
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fe0e 	bl	80003b0 <ANSI_TextFormat>
	ANSI_SetCursor(MAZE_ROW_OFF+state->player.row, MAZE_COL_OFF+2*state->player.col);
 8000794:	f8ba 0000 	ldrh.w	r0, [sl]
 8000798:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 800079c:	310b      	adds	r1, #11
 800079e:	0049      	lsls	r1, r1, #1
 80007a0:	3005      	adds	r0, #5
 80007a2:	f7ff fda5 	bl	80002f0 <ANSI_SetCursor>
	ANSI_SaveCursor();
 80007a6:	f7ff fdd9 	bl	800035c <ANSI_SaveCursor>
	ANSI_print(PLAYER_STR);
 80007aa:	4c07      	ldr	r4, [pc, #28]	; (80007c8 <draw_maze+0xb4>)
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2202      	movs	r2, #2
 80007b2:	2101      	movs	r1, #1
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <draw_maze+0xb8>)
 80007b6:	f001 fded 	bl	8002394 <fwrite>

	ANSI_flush();
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	6898      	ldr	r0, [r3, #8]
 80007be:	f001 fc6f 	bl	80020a0 <fflush>
}
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	bf00      	nop
 80007c8:	20000004 	.word	0x20000004
 80007cc:	0800313c 	.word	0x0800313c

080007d0 <on_win>:

void on_win()
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	b083      	sub	sp, #12
	LD1On();
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <on_win+0x64>)
 80007d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007da:	619a      	str	r2, [r3, #24]
	putchar('\a');
 80007dc:	2007      	movs	r0, #7
 80007de:	f001 fed3 	bl	8002588 <putchar>
	ANSI_TextFormat(4, ANSI_BOLD, ANSI_BACK_CYAN, ANSI_FORE_RED, ANSI_BLINK);
 80007e2:	2305      	movs	r3, #5
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	231f      	movs	r3, #31
 80007e8:	222e      	movs	r2, #46	; 0x2e
 80007ea:	2101      	movs	r1, #1
 80007ec:	2004      	movs	r0, #4
 80007ee:	f7ff fddf 	bl	80003b0 <ANSI_TextFormat>

	uint32_t mid_row = MAZE_ROW_OFF+MAZE_DRAW_SIZE/2;
	for(uint32_t i = 0; i < 3; ++i)
 80007f2:	2500      	movs	r5, #0
 80007f4:	e006      	b.n	8000804 <on_win+0x34>
	{
		ANSI_SetCursor(mid_row-1+i,(ANSI_MAX_COL-WIN_BOX_W)/2+1);
		for(uint32_t j = 0; j < WIN_BOX_W; ++j)
		{
			putchar(' ');
 80007f6:	2020      	movs	r0, #32
 80007f8:	f001 fec6 	bl	8002588 <putchar>
		for(uint32_t j = 0; j < WIN_BOX_W; ++j)
 80007fc:	3401      	adds	r4, #1
 80007fe:	2c0e      	cmp	r4, #14
 8000800:	d9f9      	bls.n	80007f6 <on_win+0x26>
	for(uint32_t i = 0; i < 3; ++i)
 8000802:	3501      	adds	r5, #1
 8000804:	2d02      	cmp	r5, #2
 8000806:	d806      	bhi.n	8000816 <on_win+0x46>
		ANSI_SetCursor(mid_row-1+i,(ANSI_MAX_COL-WIN_BOX_W)/2+1);
 8000808:	2121      	movs	r1, #33	; 0x21
 800080a:	f105 000d 	add.w	r0, r5, #13
 800080e:	f7ff fd6f 	bl	80002f0 <ANSI_SetCursor>
		for(uint32_t j = 0; j < WIN_BOX_W; ++j)
 8000812:	2400      	movs	r4, #0
 8000814:	e7f3      	b.n	80007fe <on_win+0x2e>
		}
	}
	ANSI_WriteCenter(mid_row,"YOU WIN!!!");
 8000816:	4908      	ldr	r1, [pc, #32]	; (8000838 <on_win+0x68>)
 8000818:	200e      	movs	r0, #14
 800081a:	f7ff fd81 	bl	8000320 <ANSI_WriteCenter>
	ANSI_TextFormat(4, ANSI_NORMAL_WEIGHT, ANSI_BACK_MAGENTA, ANSI_FORE_CYAN, ANSI_NO_BLINK);
 800081e:	2319      	movs	r3, #25
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2324      	movs	r3, #36	; 0x24
 8000824:	222d      	movs	r2, #45	; 0x2d
 8000826:	2116      	movs	r1, #22
 8000828:	2004      	movs	r0, #4
 800082a:	f7ff fdc1 	bl	80003b0 <ANSI_TextFormat>
}
 800082e:	b003      	add	sp, #12
 8000830:	bd30      	pop	{r4, r5, pc}
 8000832:	bf00      	nop
 8000834:	40022400 	.word	0x40022400
 8000838:	08003140 	.word	0x08003140

0800083c <MAZE_RunGame>:


void MAZE_RunGame()
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b0e1      	sub	sp, #388	; 0x184
	LD1Off();
 8000840:	4b67      	ldr	r3, [pc, #412]	; (80009e0 <MAZE_RunGame+0x1a4>)
 8000842:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000846:	619a      	str	r2, [r3, #24]
	ANSI_ResetScreenMode(ANSI_CURSOR_ENABLE);
 8000848:	2019      	movs	r0, #25
 800084a:	f7ff fddd 	bl	8000408 <ANSI_ResetScreenMode>
	ANSI_TextFormat(1, ANSI_CLEAR_FMT);
 800084e:	2100      	movs	r1, #0
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fdad 	bl	80003b0 <ANSI_TextFormat>
	ANSI_TextFormat(4, ANSI_BACK_MAGENTA, ANSI_FORE_CYAN, ANSI_BOLD, ANSI_BLINK);
 8000856:	2305      	movs	r3, #5
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	2224      	movs	r2, #36	; 0x24
 800085e:	212d      	movs	r1, #45	; 0x2d
 8000860:	2004      	movs	r0, #4
 8000862:	f7ff fda5 	bl	80003b0 <ANSI_TextFormat>
	ANSI_ClearScreen();
 8000866:	f7ff fd95 	bl	8000394 <ANSI_ClearScreen>
	ANSI_WriteCenter(2, "SUPER COOL MPS MAZE GAME");
 800086a:	495e      	ldr	r1, [pc, #376]	; (80009e4 <MAZE_RunGame+0x1a8>)
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fd57 	bl	8000320 <ANSI_WriteCenter>
	ANSI_TextFormat(2, ANSI_NORMAL_WEIGHT, ANSI_NO_BLINK);
 8000872:	2219      	movs	r2, #25
 8000874:	2116      	movs	r1, #22
 8000876:	2002      	movs	r0, #2
 8000878:	f7ff fd9a 	bl	80003b0 <ANSI_TextFormat>
	ANSI_WriteCenter(3, "Press button to (re)start, WASD to move, ESC to quit");
 800087c:	495a      	ldr	r1, [pc, #360]	; (80009e8 <MAZE_RunGame+0x1ac>)
 800087e:	2003      	movs	r0, #3
 8000880:	f7ff fd4e 	bl	8000320 <ANSI_WriteCenter>
	ANSI_WriteAt(ANSI_MAX_ROW,ANSI_MAX_COL-44+1,"Copyright 2019 Patrick Love & Nathan Mascari");
 8000884:	4a59      	ldr	r2, [pc, #356]	; (80009ec <MAZE_RunGame+0x1b0>)
 8000886:	2125      	movs	r1, #37	; 0x25
 8000888:	2019      	movs	r0, #25
 800088a:	f7ff fd3b 	bl	8000304 <ANSI_WriteAt>
	ANSI_HomeCursor();
 800088e:	f7ff fd57 	bl	8000340 <ANSI_HomeCursor>
	ANSI_flush();
 8000892:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <MAZE_RunGame+0x1b4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6898      	ldr	r0, [r3, #8]
 8000898:	f001 fc02 	bl	80020a0 <fflush>

	state_t game_state = STATE_MENU;
	uint8_t input_char;
	bool hasChar, first_draw = false;
 800089c:	2500      	movs	r5, #0
	state_t game_state = STATE_MENU;
 800089e:	462e      	mov	r6, r5
 80008a0:	e065      	b.n	800096e <MAZE_RunGame+0x132>

		if(SW4Val) // Starts/Restarts the game
		{
			game_state = STATE_PLAY;
			first_draw = true;
			wait_debounce_release();
 80008a2:	f7ff ff0f 	bl	80006c4 <wait_debounce_release>
			first_draw = true;
 80008a6:	2401      	movs	r4, #1
			game_state = STATE_PLAY;
 80008a8:	4626      	mov	r6, r4
			case STATE_MENU:
				break;
			case STATE_PLAY:
			{
				bool did_draw = false;
				if(first_draw)
 80008aa:	b96c      	cbnz	r4, 80008c8 <MAZE_RunGame+0x8c>
 80008ac:	4625      	mov	r5, r4
					first_draw = false;
					did_draw = true;
				}

				//TODO move/update player position
				if(hasChar)
 80008ae:	b30f      	cbz	r7, 80008f4 <MAZE_RunGame+0xb8>
				{
					dir_t move_dir = 0;
					if(input_char=='w') move_dir = DIR_UP;
 80008b0:	f89d 317f 	ldrb.w	r3, [sp, #383]	; 0x17f
 80008b4:	2b77      	cmp	r3, #119	; 0x77
 80008b6:	d013      	beq.n	80008e0 <MAZE_RunGame+0xa4>
					else if(input_char=='a') move_dir = DIR_LEFT;
 80008b8:	2b61      	cmp	r3, #97	; 0x61
 80008ba:	d022      	beq.n	8000902 <MAZE_RunGame+0xc6>
					else if(input_char=='s') move_dir = DIR_DOWN;
 80008bc:	2b73      	cmp	r3, #115	; 0x73
 80008be:	d022      	beq.n	8000906 <MAZE_RunGame+0xca>
					else if(input_char=='d') move_dir = DIR_RIGHT;
 80008c0:	2b64      	cmp	r3, #100	; 0x64
 80008c2:	d117      	bne.n	80008f4 <MAZE_RunGame+0xb8>
 80008c4:	2104      	movs	r1, #4
 80008c6:	e00c      	b.n	80008e2 <MAZE_RunGame+0xa6>
					LD1Off();
 80008c8:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <MAZE_RunGame+0x1a4>)
 80008ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008ce:	619a      	str	r2, [r3, #24]
					create_maze(&maze_state);
 80008d0:	a804      	add	r0, sp, #16
 80008d2:	f7ff ff0b 	bl	80006ec <create_maze>
					draw_maze(&maze_state);
 80008d6:	a804      	add	r0, sp, #16
 80008d8:	f7ff ff1c 	bl	8000714 <draw_maze>
					first_draw = false;
 80008dc:	2500      	movs	r5, #0
 80008de:	e7e6      	b.n	80008ae <MAZE_RunGame+0x72>
					if(input_char=='w') move_dir = DIR_UP;
 80008e0:	2108      	movs	r1, #8

					if(move_dir){ //If the character was a valid control
						coord_t nextPos = COORD_move_dir(maze_state.player, move_dir);
 80008e2:	9804      	ldr	r0, [sp, #16]
 80008e4:	f7ff fdb0 	bl	8000448 <COORD_move_dir>
 80008e8:	9003      	str	r0, [sp, #12]
						if(COORD_in_square(nextPos, MAZE_DRAW_SIZE) && !maze_state.walls[COORD_to_index(nextPos, MAZE_DRAW_SIZE)]) // Can move
 80008ea:	2113      	movs	r1, #19
 80008ec:	f7ff fdd6 	bl	800049c <COORD_in_square>
 80008f0:	4607      	mov	r7, r0
 80008f2:	b950      	cbnz	r0, 800090a <MAZE_RunGame+0xce>
						}
					}

				}

				if(has_player_won(&maze_state))
 80008f4:	a804      	add	r0, sp, #16
 80008f6:	f7ff fef3 	bl	80006e0 <has_player_won>
 80008fa:	bb70      	cbnz	r0, 800095a <MAZE_RunGame+0x11e>
					did_draw = true;
					game_state = STATE_MENU;
				}


				if(did_draw)
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d036      	beq.n	800096e <MAZE_RunGame+0x132>
 8000900:	e02e      	b.n	8000960 <MAZE_RunGame+0x124>
					else if(input_char=='a') move_dir = DIR_LEFT;
 8000902:	2101      	movs	r1, #1
 8000904:	e7ed      	b.n	80008e2 <MAZE_RunGame+0xa6>
					else if(input_char=='s') move_dir = DIR_DOWN;
 8000906:	2102      	movs	r1, #2
 8000908:	e7eb      	b.n	80008e2 <MAZE_RunGame+0xa6>
						if(COORD_in_square(nextPos, MAZE_DRAW_SIZE) && !maze_state.walls[COORD_to_index(nextPos, MAZE_DRAW_SIZE)]) // Can move
 800090a:	2113      	movs	r1, #19
 800090c:	9803      	ldr	r0, [sp, #12]
 800090e:	f7ff fdd5 	bl	80004bc <COORD_to_index>
 8000912:	ab04      	add	r3, sp, #16
 8000914:	4418      	add	r0, r3
 8000916:	7903      	ldrb	r3, [r0, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1eb      	bne.n	80008f4 <MAZE_RunGame+0xb8>
							ANSI_RestoreCursor();
 800091c:	f7ff fd2c 	bl	8000378 <ANSI_RestoreCursor>
							putchar(' '); putchar(' '); // Clear current player position
 8000920:	2020      	movs	r0, #32
 8000922:	f001 fe31 	bl	8002588 <putchar>
 8000926:	2020      	movs	r0, #32
 8000928:	f001 fe2e 	bl	8002588 <putchar>
							ANSI_SetCursor(MAZE_ROW_OFF+nextPos.row, MAZE_COL_OFF+2*nextPos.col);
 800092c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8000930:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8000934:	310b      	adds	r1, #11
 8000936:	0049      	lsls	r1, r1, #1
 8000938:	3005      	adds	r0, #5
 800093a:	f7ff fcd9 	bl	80002f0 <ANSI_SetCursor>
							ANSI_SaveCursor();
 800093e:	f7ff fd0d 	bl	800035c <ANSI_SaveCursor>
							ANSI_print(PLAYER_STR);
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MAZE_RunGame+0x1b4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	2202      	movs	r2, #2
 800094a:	2101      	movs	r1, #1
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <MAZE_RunGame+0x1b8>)
 800094e:	f001 fd21 	bl	8002394 <fwrite>
							maze_state.player = nextPos;
 8000952:	9b03      	ldr	r3, [sp, #12]
 8000954:	9304      	str	r3, [sp, #16]
							did_draw = true;
 8000956:	463c      	mov	r4, r7
 8000958:	e7cc      	b.n	80008f4 <MAZE_RunGame+0xb8>
					on_win();
 800095a:	f7ff ff39 	bl	80007d0 <on_win>
					game_state = STATE_MENU;
 800095e:	2600      	movs	r6, #0
				{
					ANSI_HomeCursor(); // Keep cursor out of actual maze area
 8000960:	f7ff fcee 	bl	8000340 <ANSI_HomeCursor>
					ANSI_flush();
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MAZE_RunGame+0x1b4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6898      	ldr	r0, [r3, #8]
 800096a:	f001 fb99 	bl	80020a0 <fflush>
		hasChar = uart_getchar_nw(&USB_UART, &input_char);
 800096e:	f20d 117f 	addw	r1, sp, #383	; 0x17f
 8000972:	4821      	ldr	r0, [pc, #132]	; (80009f8 <MAZE_RunGame+0x1bc>)
 8000974:	f000 f98c 	bl	8000c90 <uart_getchar_nw>
		if(hasChar&&input_char==ESCAPE_CHARACTER) break;
 8000978:	4607      	mov	r7, r0
 800097a:	b118      	cbz	r0, 8000984 <MAZE_RunGame+0x148>
 800097c:	f89d 317f 	ldrb.w	r3, [sp, #383]	; 0x17f
 8000980:	2b1b      	cmp	r3, #27
 8000982:	d008      	beq.n	8000996 <MAZE_RunGame+0x15a>
		if(SW4Val) // Starts/Restarts the game
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MAZE_RunGame+0x1c0>)
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	f013 0f40 	tst.w	r3, #64	; 0x40
 800098c:	d189      	bne.n	80008a2 <MAZE_RunGame+0x66>
		switch(game_state)
 800098e:	2e00      	cmp	r6, #0
 8000990:	d0ed      	beq.n	800096e <MAZE_RunGame+0x132>
 8000992:	462c      	mov	r4, r5
 8000994:	e789      	b.n	80008aa <MAZE_RunGame+0x6e>
			}
		}
	}


	ANSI_TextFormat(3, ANSI_BOLD, ANSI_BACK_MAGENTA, ANSI_FORE_CYAN);
 8000996:	2324      	movs	r3, #36	; 0x24
 8000998:	222d      	movs	r2, #45	; 0x2d
 800099a:	2101      	movs	r1, #1
 800099c:	2003      	movs	r0, #3
 800099e:	f7ff fd07 	bl	80003b0 <ANSI_TextFormat>
	ANSI_ClearScreen();
 80009a2:	f7ff fcf7 	bl	8000394 <ANSI_ClearScreen>
	ANSI_WriteCenter(ANSI_MAX_ROW/2+1,"Thanks for playing!");
 80009a6:	4916      	ldr	r1, [pc, #88]	; (8000a00 <MAZE_RunGame+0x1c4>)
 80009a8:	200d      	movs	r0, #13
 80009aa:	f7ff fcb9 	bl	8000320 <ANSI_WriteCenter>
	ANSI_flush();
 80009ae:	4c10      	ldr	r4, [pc, #64]	; (80009f0 <MAZE_RunGame+0x1b4>)
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	6898      	ldr	r0, [r3, #8]
 80009b4:	f001 fb74 	bl	80020a0 <fflush>

	delay_us(3*SECONDS);
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MAZE_RunGame+0x1c8>)
 80009ba:	f7ff fe7b 	bl	80006b4 <delay_us>

	ANSI_TextFormat(1, ANSI_CLEAR_FMT);
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fcf5 	bl	80003b0 <ANSI_TextFormat>
	ANSI_ClearScreen();
 80009c6:	f7ff fce5 	bl	8000394 <ANSI_ClearScreen>
	ANSI_SetScreenMode(ANSI_CURSOR_ENABLE);
 80009ca:	2019      	movs	r0, #25
 80009cc:	f7ff fd14 	bl	80003f8 <ANSI_SetScreenMode>
	ANSI_HomeCursor();
 80009d0:	f7ff fcb6 	bl	8000340 <ANSI_HomeCursor>
	ANSI_flush();
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	6898      	ldr	r0, [r3, #8]
 80009d8:	f001 fb62 	bl	80020a0 <fflush>
 80009dc:	e7fe      	b.n	80009dc <MAZE_RunGame+0x1a0>
 80009de:	bf00      	nop
 80009e0:	40022400 	.word	0x40022400
 80009e4:	0800314c 	.word	0x0800314c
 80009e8:	08003168 	.word	0x08003168
 80009ec:	080031a0 	.word	0x080031a0
 80009f0:	20000004 	.word	0x20000004
 80009f4:	0800313c 	.word	0x0800313c
 80009f8:	20000090 	.word	0x20000090
 80009fc:	40021400 	.word	0x40021400
 8000a00:	080031d0 	.word	0x080031d0
 8000a04:	002dc6c0 	.word	0x002dc6c0

08000a08 <aldous_broder_ust>:
#include "maze_gen.h"
#include <stdlib.h>
#include <string.h>

void aldous_broder_ust(dir_t* field, uint32_t size)
{
 8000a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	4606      	mov	r6, r0
 8000a10:	460d      	mov	r5, r1
	memset(field,0,size*size*sizeof(dir_t)); //Clear maze
 8000a12:	fb01 fa01 	mul.w	sl, r1, r1
 8000a16:	4652      	mov	r2, sl
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f001 fced 	bl	80023f8 <memset>

	coord_t currentCoord = {0,0};
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a24:	f8ad 3006 	strh.w	r3, [sp, #6]
	dir_t* currentDirs = field;

	uint32_t remaining = size*size-1;
 8000a28:	f10a 38ff 	add.w	r8, sl, #4294967295
	dir_t* currentDirs = field;
 8000a2c:	46b3      	mov	fp, r6
	while(remaining)
 8000a2e:	e002      	b.n	8000a36 <aldous_broder_ust+0x2e>
		{
			--remaining;
			*currentDirs |= dir;
			*nextDirs |= COORD_opposite_dir(dir);
		}
		currentCoord = nextCoord;
 8000a30:	9b00      	ldr	r3, [sp, #0]
 8000a32:	9301      	str	r3, [sp, #4]
		currentDirs = nextDirs;
 8000a34:	46cb      	mov	fp, r9
	while(remaining)
 8000a36:	f1b8 0f00 	cmp.w	r8, #0
 8000a3a:	d024      	beq.n	8000a86 <aldous_broder_ust+0x7e>
			dir = COORD_random_dir();
 8000a3c:	f7ff fcec 	bl	8000418 <COORD_random_dir>
 8000a40:	4604      	mov	r4, r0
			nextCoord = COORD_move_dir(currentCoord, dir);
 8000a42:	4601      	mov	r1, r0
 8000a44:	9801      	ldr	r0, [sp, #4]
 8000a46:	f7ff fcff 	bl	8000448 <COORD_move_dir>
 8000a4a:	9000      	str	r0, [sp, #0]
		} while (!COORD_in_square(nextCoord, size));
 8000a4c:	b2e9      	uxtb	r1, r5
 8000a4e:	f7ff fd25 	bl	800049c <COORD_in_square>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d0f2      	beq.n	8000a3c <aldous_broder_ust+0x34>
		dir_t* nextDirs = field + COORD_to_index(nextCoord, size);
 8000a56:	4629      	mov	r1, r5
 8000a58:	9800      	ldr	r0, [sp, #0]
 8000a5a:	f7ff fd2f 	bl	80004bc <COORD_to_index>
 8000a5e:	4607      	mov	r7, r0
 8000a60:	eb06 0900 	add.w	r9, r6, r0
		if(!*nextDirs) // No directions, unvisited.  Add to path and decrement remaining
 8000a64:	5c33      	ldrb	r3, [r6, r0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1e2      	bne.n	8000a30 <aldous_broder_ust+0x28>
			--remaining;
 8000a6a:	f108 38ff 	add.w	r8, r8, #4294967295
			*currentDirs |= dir;
 8000a6e:	f89b 3000 	ldrb.w	r3, [fp]
 8000a72:	4323      	orrs	r3, r4
 8000a74:	f88b 3000 	strb.w	r3, [fp]
			*nextDirs |= COORD_opposite_dir(dir);
 8000a78:	4620      	mov	r0, r4
 8000a7a:	f7ff fcdc 	bl	8000436 <COORD_opposite_dir>
 8000a7e:	5df3      	ldrb	r3, [r6, r7]
 8000a80:	4318      	orrs	r0, r3
 8000a82:	55f0      	strb	r0, [r6, r7]
 8000a84:	e7d4      	b.n	8000a30 <aldous_broder_ust+0x28>
	}

	//Always go from top to bottom of maze
	uint32_t start_id = rand() % size;
 8000a86:	f001 fdb7 	bl	80025f8 <rand>
 8000a8a:	fbb0 f4f5 	udiv	r4, r0, r5
 8000a8e:	fb05 0414 	mls	r4, r5, r4, r0
	uint32_t end_id = (size*size-1) - (rand() % size);
 8000a92:	f001 fdb1 	bl	80025f8 <rand>
 8000a96:	fbb0 f3f5 	udiv	r3, r0, r5
 8000a9a:	fb05 0513 	mls	r5, r5, r3, r0
 8000a9e:	ebaa 0a05 	sub.w	sl, sl, r5
 8000aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
	field[start_id] |= DIR_UP;
 8000aa6:	5d33      	ldrb	r3, [r6, r4]
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	5533      	strb	r3, [r6, r4]
	field[end_id] |= DIR_DOWN;
 8000aae:	f816 300a 	ldrb.w	r3, [r6, sl]
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f806 300a 	strb.w	r3, [r6, sl]
}
 8000aba:	b003      	add	sp, #12
 8000abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ac0 <edge_to_printable>:

void edge_to_printable(dir_t* edge_maze, bool* print, uint32_t size)
{
 8000ac0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t print_size = 2*size+1;
 8000ac2:	0055      	lsls	r5, r2, #1
 8000ac4:	3501      	adds	r5, #1

	for(uint32_t i = 0; i < print_size; ++i) // Set all corners as walls
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e034      	b.n	8000b34 <edge_to_printable+0x74>
				else // possible left/right boundary
				{
					uint32_t id = j/2;
					dir_t mask = DIR_LEFT;
					if(id==size) { // Last col, need to use right wall indicator
						id = size-1;
 8000aca:	1e57      	subs	r7, r2, #1
						mask = DIR_RIGHT;
 8000acc:	f04f 0c04 	mov.w	ip, #4
					}
					fill = !(edge_maze[(i/2)*size+id] & mask); // Fill if can't go this way
 8000ad0:	0866      	lsrs	r6, r4, #1
 8000ad2:	fb02 7606 	mla	r6, r2, r6, r7
 8000ad6:	5d86      	ldrb	r6, [r0, r6]
 8000ad8:	ea16 0f0c 	tst.w	r6, ip
 8000adc:	bf0c      	ite	eq
 8000ade:	2701      	moveq	r7, #1
 8000ae0:	2700      	movne	r7, #0
				else // Corner, always wall
				{
					fill = true;
				}
			}
			print[i*print_size + j] = fill;
 8000ae2:	fb05 3604 	mla	r6, r5, r4, r3
 8000ae6:	558f      	strb	r7, [r1, r6]
		for(uint32_t j = 0; j < print_size; ++j)
 8000ae8:	3301      	adds	r3, #1
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	d221      	bcs.n	8000b32 <edge_to_printable+0x72>
			bool col_odd = j%2;
 8000aee:	f003 0601 	and.w	r6, r3, #1
			if(row_odd)
 8000af2:	f014 0f01 	tst.w	r4, #1
 8000af6:	d006      	beq.n	8000b06 <edge_to_printable+0x46>
				if(col_odd){ // Corridor square
 8000af8:	b9be      	cbnz	r6, 8000b2a <edge_to_printable+0x6a>
					uint32_t id = j/2;
 8000afa:	085f      	lsrs	r7, r3, #1
					if(id==size) { // Last col, need to use right wall indicator
 8000afc:	42ba      	cmp	r2, r7
 8000afe:	d0e4      	beq.n	8000aca <edge_to_printable+0xa>
					dir_t mask = DIR_LEFT;
 8000b00:	f04f 0c01 	mov.w	ip, #1
 8000b04:	e7e4      	b.n	8000ad0 <edge_to_printable+0x10>
				if(col_odd){ // possible up/down boundary
 8000b06:	b196      	cbz	r6, 8000b2e <edge_to_printable+0x6e>
					uint32_t id = i/2;
 8000b08:	0866      	lsrs	r6, r4, #1
					if(id==size) { // Last col, need to use right wall indicator
 8000b0a:	42b2      	cmp	r2, r6
 8000b0c:	d00a      	beq.n	8000b24 <edge_to_printable+0x64>
					dir_t mask = DIR_UP;
 8000b0e:	2708      	movs	r7, #8
					fill = !(edge_maze[id*size+(j/2)] & mask); // Fill if can't go this way
 8000b10:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8000b14:	fb02 c606 	mla	r6, r2, r6, ip
 8000b18:	5d86      	ldrb	r6, [r0, r6]
 8000b1a:	423e      	tst	r6, r7
 8000b1c:	bf0c      	ite	eq
 8000b1e:	2701      	moveq	r7, #1
 8000b20:	2700      	movne	r7, #0
 8000b22:	e7de      	b.n	8000ae2 <edge_to_printable+0x22>
						id = size-1;
 8000b24:	1e56      	subs	r6, r2, #1
						mask = DIR_DOWN;
 8000b26:	2702      	movs	r7, #2
 8000b28:	e7f2      	b.n	8000b10 <edge_to_printable+0x50>
					fill = false;
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	e7d9      	b.n	8000ae2 <edge_to_printable+0x22>
					fill = true;
 8000b2e:	2701      	movs	r7, #1
 8000b30:	e7d7      	b.n	8000ae2 <edge_to_printable+0x22>
	for(uint32_t i = 0; i < print_size; ++i) // Set all corners as walls
 8000b32:	3401      	adds	r4, #1
 8000b34:	42ac      	cmp	r4, r5
 8000b36:	d201      	bcs.n	8000b3c <edge_to_printable+0x7c>
		for(uint32_t j = 0; j < print_size; ++j)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e7d6      	b.n	8000aea <edge_to_printable+0x2a>
		}
	}
}
 8000b3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000b3e:	4770      	bx	lr

08000b40 <MGEN_Generate>:



void MGEN_Generate(bool* arr, uint32_t size)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4605      	mov	r5, r0
 8000b46:	460c      	mov	r4, r1
	dir_t edges[size*size];
 8000b48:	fb01 f301 	mul.w	r3, r1, r1
 8000b4c:	3307      	adds	r3, #7
 8000b4e:	f023 0307 	bic.w	r3, r3, #7
 8000b52:	ebad 0d03 	sub.w	sp, sp, r3
	aldous_broder_ust(edges, size);
 8000b56:	4668      	mov	r0, sp
 8000b58:	f7ff ff56 	bl	8000a08 <aldous_broder_ust>
	edge_to_printable(edges, arr, size);
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	4668      	mov	r0, sp
 8000b62:	f7ff ffad 	bl	8000ac0 <edge_to_printable>
}
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b6c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000b6c:	b530      	push	{r4, r5, lr}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000b70:	6803      	ldr	r3, [r0, #0]
 8000b72:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <HAL_UART_MspInit+0xc0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d004      	beq.n	8000b82 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000b78:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <HAL_UART_MspInit+0xc4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d02c      	beq.n	8000bd8 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000b7e:	b00b      	add	sp, #44	; 0x2c
 8000b80:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000b82:	4c2c      	ldr	r4, [pc, #176]	; (8000c34 <HAL_UART_MspInit+0xc8>)
 8000b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000bac:	4d22      	ldr	r5, [pc, #136]	; (8000c38 <HAL_UART_MspInit+0xcc>)
 8000bae:	a905      	add	r1, sp, #20
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f000 f959 	bl	8000e68 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000bbc:	a905      	add	r1, sp, #20
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 f952 	bl	8000e68 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000bc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6463      	str	r3, [r4, #68]	; 0x44
 8000bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	9b02      	ldr	r3, [sp, #8]
 8000bd6:	e7d2      	b.n	8000b7e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000bd8:	4c16      	ldr	r4, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0xc8>)
 8000bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6323      	str	r3, [r4, #48]	; 0x30
 8000be2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	9303      	str	r3, [sp, #12]
 8000bea:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000c00:	4d0e      	ldr	r5, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0xd0>)
 8000c02:	a905      	add	r1, sp, #20
 8000c04:	4628      	mov	r0, r5
 8000c06:	f000 f92f 	bl	8000e68 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000c0e:	a905      	add	r1, sp, #20
 8000c10:	4628      	mov	r0, r5
 8000c12:	f000 f929 	bl	8000e68 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	6463      	str	r3, [r4, #68]	; 0x44
 8000c1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	9304      	str	r3, [sp, #16]
 8000c26:	9b04      	ldr	r3, [sp, #16]
}
 8000c28:	e7a9      	b.n	8000b7e <HAL_UART_MspInit+0x12>
 8000c2a:	bf00      	nop
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40011400 	.word	0x40011400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40020800 	.word	0x40020800

08000c40 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000c40:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000c42:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000c44:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	2200      	movs	r2, #0
 8000c48:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000c4a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000c4c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000c4e:	210c      	movs	r1, #12
 8000c50:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c52:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000c54:	f001 f941 	bl	8001eda <HAL_UART_Init>
}
 8000c58:	bd08      	pop	{r3, pc}
	...

08000c5c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	b292      	uxth	r2, r2
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <_write+0x14>)
 8000c68:	f000 fe0e 	bl	8001888 <HAL_UART_Transmit>
	return len;
}
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	bd10      	pop	{r4, pc}
 8000c70:	20000090 	.word	0x20000090

08000c74 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000c74:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000c76:	2200      	movs	r2, #0
 8000c78:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <_read+0x18>)
 8000c82:	f000 fe6a 	bl	800195a <HAL_UART_Receive>
	return len;
}
 8000c86:	2001      	movs	r0, #1
 8000c88:	bd08      	pop	{r3, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000090 	.word	0x20000090

08000c90 <uart_getchar_nw>:
	return (char)input[0];
}

// Non-blocking read
// 'echo' means enable (1) or disable (0) echoing of characters
_Bool uart_getchar_nw(UART_HandleTypeDef *huart, uint8_t* val) {
 8000c90:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status = HAL_UART_Receive(huart, val, 1, 0);
 8000c92:	2300      	movs	r3, #0
 8000c94:	2201      	movs	r2, #1
 8000c96:	f000 fe60 	bl	800195a <HAL_UART_Receive>
	return (status == HAL_OK);
}
 8000c9a:	fab0 f080 	clz	r0, r0
 8000c9e:	0940      	lsrs	r0, r0, #5
 8000ca0:	bd08      	pop	{r3, pc}
	...

08000ca4 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cce:	f000 f813 	bl	8000cf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f001 fb6d 	bl	80023b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fcad 	bl	8000634 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000cdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ce8:	08003284 	.word	0x08003284
  ldr r2, =_sbss
 8000cec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cf0:	20000108 	.word	0x20000108

08000cf4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <SystemInit+0x40>)
 8000cfc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemInit+0x44>)
 8000d0a:	6819      	ldr	r1, [r3, #0]
 8000d0c:	f041 0101 	orr.w	r1, r1, #1
 8000d10:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d12:	2000      	movs	r0, #0
 8000d14:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <SystemInit+0x48>)
 8000d1a:	4021      	ands	r1, r4
 8000d1c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <SystemInit+0x4c>)
 8000d20:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000d28:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d2a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	6093      	str	r3, [r2, #8]
#endif
}
 8000d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	fef6ffff 	.word	0xfef6ffff
 8000d44:	24003010 	.word	0x24003010

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_InitTick+0x24>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_InitTick+0x28>)
 8000d52:	fba3 3000 	umull	r3, r0, r3, r0
 8000d56:	0980      	lsrs	r0, r0, #6
 8000d58:	f000 f870 	bl	8000e3c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f838 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000d68:	2000      	movs	r0, #0
 8000d6a:	bd10      	pop	{r4, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	10624dd3 	.word	0x10624dd3

08000d74 <HAL_Init>:
{
 8000d74:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x20>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f817 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_InitTick>
  HAL_MspInit();
 8000d8c:	f000 f95c 	bl	8001048 <HAL_MspInit>
}
 8000d90:	2000      	movs	r0, #0
 8000d92:	bd08      	pop	{r3, pc}
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d98:	4a02      	ldr	r2, [pc, #8]	; (8000da4 <HAL_IncTick+0xc>)
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000100 	.word	0x20000100

08000da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000da8:	4b01      	ldr	r3, [pc, #4]	; (8000db0 <HAL_GetTick+0x8>)
 8000daa:	6818      	ldr	r0, [r3, #0]
}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000100 	.word	0x20000100

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000db6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dc0:	0200      	lsls	r0, r0, #8
 8000dc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000dc8:	4a02      	ldr	r2, [pc, #8]	; (8000dd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dca:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000dcc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	05fa0000 	.word	0x05fa0000

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_NVIC_SetPriority+0x58>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de2:	f1c3 0407 	rsb	r4, r3, #7
 8000de6:	2c04      	cmp	r4, #4
 8000de8:	bf28      	it	cs
 8000dea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dec:	1d1d      	adds	r5, r3, #4
 8000dee:	2d06      	cmp	r5, #6
 8000df0:	d914      	bls.n	8000e1c <HAL_NVIC_SetPriority+0x44>
 8000df2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 35ff 	mov.w	r5, #4294967295
 8000df8:	fa05 f404 	lsl.w	r4, r5, r4
 8000dfc:	ea21 0104 	bic.w	r1, r1, r4
 8000e00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e02:	fa05 f303 	lsl.w	r3, r5, r3
 8000e06:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	db07      	blt.n	8000e20 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	0109      	lsls	r1, r1, #4
 8000e12:	b2c9      	uxtb	r1, r1
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_NVIC_SetPriority+0x5c>)
 8000e16:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e18:	bc30      	pop	{r4, r5}
 8000e1a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e7e9      	b.n	8000df4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	f000 000f 	and.w	r0, r0, #15
 8000e24:	0109      	lsls	r1, r1, #4
 8000e26:	b2c9      	uxtb	r1, r1
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_NVIC_SetPriority+0x60>)
 8000e2a:	5419      	strb	r1, [r3, r0]
 8000e2c:	e7f4      	b.n	8000e18 <HAL_NVIC_SetPriority+0x40>
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	e000e400 	.word	0xe000e400
 8000e38:	e000ed14 	.word	0xe000ed14

08000e3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e42:	d20a      	bcs.n	8000e5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_SYSTICK_Config+0x24>)
 8000e46:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_SYSTICK_Config+0x28>)
 8000e4a:	21f0      	movs	r1, #240	; 0xf0
 8000e4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	2000      	movs	r0, #0
 8000e52:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2b0f      	cmp	r3, #15
 8000e6c:	f200 80e2 	bhi.w	8001034 <HAL_GPIO_Init+0x1cc>
{
 8000e70:	b4f0      	push	{r4, r5, r6, r7}
 8000e72:	b082      	sub	sp, #8
 8000e74:	e039      	b.n	8000eea <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e76:	2209      	movs	r2, #9
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	40b2      	lsls	r2, r6
 8000e7e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e80:	3402      	adds	r4, #2
 8000e82:	4e6d      	ldr	r6, [pc, #436]	; (8001038 <HAL_GPIO_Init+0x1d0>)
 8000e84:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e88:	4a6c      	ldr	r2, [pc, #432]	; (800103c <HAL_GPIO_Init+0x1d4>)
 8000e8a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	43ea      	mvns	r2, r5
 8000e8e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e92:	684f      	ldr	r7, [r1, #4]
 8000e94:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e98:	d001      	beq.n	8000e9e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000e9a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000e9e:	4c67      	ldr	r4, [pc, #412]	; (800103c <HAL_GPIO_Init+0x1d4>)
 8000ea0:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000ea2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	684f      	ldr	r7, [r1, #4]
 8000eaa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000eae:	d001      	beq.n	8000eb4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000eb0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000eb4:	4c61      	ldr	r4, [pc, #388]	; (800103c <HAL_GPIO_Init+0x1d4>)
 8000eb6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ebe:	684f      	ldr	r7, [r1, #4]
 8000ec0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ec4:	d001      	beq.n	8000eca <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000ec6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000eca:	4c5c      	ldr	r4, [pc, #368]	; (800103c <HAL_GPIO_Init+0x1d4>)
 8000ecc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000ece:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed2:	684e      	ldr	r6, [r1, #4]
 8000ed4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ed8:	d001      	beq.n	8000ede <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000eda:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000ede:	4c57      	ldr	r4, [pc, #348]	; (800103c <HAL_GPIO_Init+0x1d4>)
 8000ee0:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	f200 80a2 	bhi.w	800102e <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000eea:	2201      	movs	r2, #1
 8000eec:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	680c      	ldr	r4, [r1, #0]
 8000ef0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000ef4:	42aa      	cmp	r2, r5
 8000ef6:	d1f4      	bne.n	8000ee2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	684c      	ldr	r4, [r1, #4]
 8000efa:	2c12      	cmp	r4, #18
 8000efc:	bf18      	it	ne
 8000efe:	2c02      	cmpne	r4, #2
 8000f00:	d110      	bne.n	8000f24 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000f02:	08de      	lsrs	r6, r3, #3
 8000f04:	3608      	adds	r6, #8
 8000f06:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f0a:	f003 0407 	and.w	r4, r3, #7
 8000f0e:	00a7      	lsls	r7, r4, #2
 8000f10:	240f      	movs	r4, #15
 8000f12:	40bc      	lsls	r4, r7
 8000f14:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f18:	690c      	ldr	r4, [r1, #16]
 8000f1a:	40bc      	lsls	r4, r7
 8000f1c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f20:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000f24:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f26:	005f      	lsls	r7, r3, #1
 8000f28:	2603      	movs	r6, #3
 8000f2a:	40be      	lsls	r6, r7
 8000f2c:	43f6      	mvns	r6, r6
 8000f2e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f32:	684c      	ldr	r4, [r1, #4]
 8000f34:	f004 0403 	and.w	r4, r4, #3
 8000f38:	40bc      	lsls	r4, r7
 8000f3a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000f3e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f40:	684c      	ldr	r4, [r1, #4]
 8000f42:	f104 3cff 	add.w	ip, r4, #4294967295
 8000f46:	2c11      	cmp	r4, #17
 8000f48:	bf18      	it	ne
 8000f4a:	f1bc 0f01 	cmpne.w	ip, #1
 8000f4e:	d901      	bls.n	8000f54 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	2c12      	cmp	r4, #18
 8000f52:	d111      	bne.n	8000f78 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000f54:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f56:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f5a:	68cc      	ldr	r4, [r1, #12]
 8000f5c:	40bc      	lsls	r4, r7
 8000f5e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000f62:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f64:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f66:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f6a:	684c      	ldr	r4, [r1, #4]
 8000f6c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000f70:	409a      	lsls	r2, r3
 8000f72:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000f76:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f78:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f7c:	688a      	ldr	r2, [r1, #8]
 8000f7e:	40ba      	lsls	r2, r7
 8000f80:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000f82:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f84:	684a      	ldr	r2, [r1, #4]
 8000f86:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000f8a:	d0aa      	beq.n	8000ee2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <HAL_GPIO_Init+0x1d8>)
 8000f8e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000f90:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000f94:	6454      	str	r4, [r2, #68]	; 0x44
 8000f96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fa0:	089c      	lsrs	r4, r3, #2
 8000fa2:	1ca6      	adds	r6, r4, #2
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_GPIO_Init+0x1d0>)
 8000fa6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000faa:	f003 0203 	and.w	r2, r3, #3
 8000fae:	0096      	lsls	r6, r2, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	40b2      	lsls	r2, r6
 8000fb4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <HAL_GPIO_Init+0x1dc>)
 8000fba:	4290      	cmp	r0, r2
 8000fbc:	f43f af5d 	beq.w	8000e7a <HAL_GPIO_Init+0x12>
 8000fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d022      	beq.n	800100e <HAL_GPIO_Init+0x1a6>
 8000fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fcc:	4290      	cmp	r0, r2
 8000fce:	d020      	beq.n	8001012 <HAL_GPIO_Init+0x1aa>
 8000fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	d01e      	beq.n	8001016 <HAL_GPIO_Init+0x1ae>
 8000fd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fdc:	4290      	cmp	r0, r2
 8000fde:	d01c      	beq.n	800101a <HAL_GPIO_Init+0x1b2>
 8000fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe4:	4290      	cmp	r0, r2
 8000fe6:	d01a      	beq.n	800101e <HAL_GPIO_Init+0x1b6>
 8000fe8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fec:	4290      	cmp	r0, r2
 8000fee:	d018      	beq.n	8001022 <HAL_GPIO_Init+0x1ba>
 8000ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ff4:	4290      	cmp	r0, r2
 8000ff6:	d016      	beq.n	8001026 <HAL_GPIO_Init+0x1be>
 8000ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ffc:	4290      	cmp	r0, r2
 8000ffe:	d014      	beq.n	800102a <HAL_GPIO_Init+0x1c2>
 8001000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001004:	4290      	cmp	r0, r2
 8001006:	f43f af36 	beq.w	8000e76 <HAL_GPIO_Init+0xe>
 800100a:	220a      	movs	r2, #10
 800100c:	e736      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 800100e:	2201      	movs	r2, #1
 8001010:	e734      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 8001012:	2202      	movs	r2, #2
 8001014:	e732      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 8001016:	2203      	movs	r2, #3
 8001018:	e730      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 800101a:	2204      	movs	r2, #4
 800101c:	e72e      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 800101e:	2205      	movs	r2, #5
 8001020:	e72c      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 8001022:	2206      	movs	r2, #6
 8001024:	e72a      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 8001026:	2207      	movs	r2, #7
 8001028:	e728      	b.n	8000e7c <HAL_GPIO_Init+0x14>
 800102a:	2208      	movs	r2, #8
 800102c:	e726      	b.n	8000e7c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800102e:	b002      	add	sp, #8
 8001030:	bcf0      	pop	{r4, r5, r6, r7}
 8001032:	4770      	bx	lr
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40013800 	.word	0x40013800
 800103c:	40013c00 	.word	0x40013c00
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
 
}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800104c:	b510      	push	{r4, lr}
 800104e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_PWREx_EnableOverDrive+0x74>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001054:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106e:	f7ff fe9b 	bl	8000da8 <HAL_GetTick>
 8001072:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800107c:	d108      	bne.n	8001090 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800107e:	f7ff fe93 	bl	8000da8 <HAL_GetTick>
 8001082:	1b00      	subs	r0, r0, r4
 8001084:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001088:	d9f4      	bls.n	8001074 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800108a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800108c:	b002      	add	sp, #8
 800108e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800109a:	f7ff fe85 	bl	8000da8 <HAL_GetTick>
 800109e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_PWREx_EnableOverDrive+0x78>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010a8:	d107      	bne.n	80010ba <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010aa:	f7ff fe7d 	bl	8000da8 <HAL_GetTick>
 80010ae:	1b00      	subs	r0, r0, r4
 80010b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010b4:	d9f4      	bls.n	80010a0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e7e8      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
 80010bc:	e7e6      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x40>
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	6803      	ldr	r3, [r0, #0]
 80010d0:	f013 0f01 	tst.w	r3, #1
 80010d4:	d029      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010d6:	4ba9      	ldr	r3, [pc, #676]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d01a      	beq.n	8001118 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e2:	4ba6      	ldr	r3, [pc, #664]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d00f      	beq.n	800110e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d040      	beq.n	8001178 <HAL_RCC_OscConfig+0xb0>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d154      	bne.n	80011a4 <HAL_RCC_OscConfig+0xdc>
 80010fa:	4ba0      	ldr	r3, [pc, #640]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e039      	b.n	8001182 <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b9b      	ldr	r3, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001116:	d0ea      	beq.n	80010ee <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4b98      	ldr	r3, [pc, #608]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001120:	d003      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 81d3 	beq.w	80014d0 <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	f013 0f02 	tst.w	r3, #2
 8001130:	d07b      	beq.n	800122a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001132:	4b92      	ldr	r3, [pc, #584]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f013 0f0c 	tst.w	r3, #12
 800113a:	d05e      	beq.n	80011fa <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d053      	beq.n	80011f0 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001148:	68e3      	ldr	r3, [r4, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8097 	beq.w	800127e <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	4a8a      	ldr	r2, [pc, #552]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fe25 	bl	8000da8 <HAL_GetTick>
 800115e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	4b86      	ldr	r3, [pc, #536]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f013 0f02 	tst.w	r3, #2
 8001168:	d17a      	bne.n	8001260 <HAL_RCC_OscConfig+0x198>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fe1d 	bl	8000da8 <HAL_GetTick>
 800116e:	1b40      	subs	r0, r0, r5
 8001170:	2802      	cmp	r0, #2
 8001172:	d9f5      	bls.n	8001160 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001174:	2003      	movs	r0, #3
 8001176:	e1ae      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001178:	4a80      	ldr	r2, [pc, #512]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001182:	6863      	ldr	r3, [r4, #4]
 8001184:	b32b      	cbz	r3, 80011d2 <HAL_RCC_OscConfig+0x10a>
        tickstart = HAL_GetTick();
 8001186:	f7ff fe0f 	bl	8000da8 <HAL_GetTick>
 800118a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118c:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001194:	d1c9      	bne.n	800112a <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001196:	f7ff fe07 	bl	8000da8 <HAL_GetTick>
 800119a:	1b40      	subs	r0, r0, r5
 800119c:	2864      	cmp	r0, #100	; 0x64
 800119e:	d9f5      	bls.n	800118c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e198      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a8:	d009      	beq.n	80011be <HAL_RCC_OscConfig+0xf6>
 80011aa:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e7e1      	b.n	8001182 <HAL_RCC_OscConfig+0xba>
 80011be:	4b6f      	ldr	r3, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e7d7      	b.n	8001182 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80011d2:	f7ff fde9 	bl	8000da8 <HAL_GetTick>
 80011d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011e0:	d0a3      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fde1 	bl	8000da8 <HAL_GetTick>
 80011e6:	1b40      	subs	r0, r0, r5
 80011e8:	2864      	cmp	r0, #100	; 0x64
 80011ea:	d9f5      	bls.n	80011d8 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	e172      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011f8:	d1a6      	bne.n	8001148 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b60      	ldr	r3, [pc, #384]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f013 0f02 	tst.w	r3, #2
 8001202:	d004      	beq.n	800120e <HAL_RCC_OscConfig+0x146>
 8001204:	68e3      	ldr	r3, [r4, #12]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x146>
        return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	e163      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	485b      	ldr	r0, [pc, #364]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001210:	6803      	ldr	r3, [r0, #0]
 8001212:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001216:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	22f8      	movs	r2, #248	; 0xf8
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	fab2 f282 	clz	r2, r2
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4313      	orrs	r3, r2
 8001228:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	f013 0f08 	tst.w	r3, #8
 8001230:	d04d      	beq.n	80012ce <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001232:	6963      	ldr	r3, [r4, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d036      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1de>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800123a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001242:	f7ff fdb1 	bl	8000da8 <HAL_GetTick>
 8001246:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800124a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124c:	f013 0f02 	tst.w	r3, #2
 8001250:	d13d      	bne.n	80012ce <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff fda9 	bl	8000da8 <HAL_GetTick>
 8001256:	1b40      	subs	r0, r0, r5
 8001258:	2802      	cmp	r0, #2
 800125a:	d9f5      	bls.n	8001248 <HAL_RCC_OscConfig+0x180>
        {
          return HAL_TIMEOUT;
 800125c:	2003      	movs	r0, #3
 800125e:	e13a      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4846      	ldr	r0, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001262:	6803      	ldr	r3, [r0, #0]
 8001264:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001268:	6921      	ldr	r1, [r4, #16]
 800126a:	22f8      	movs	r2, #248	; 0xf8
 800126c:	fa92 f2a2 	rbit	r2, r2
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4313      	orrs	r3, r2
 800127a:	6003      	str	r3, [r0, #0]
 800127c:	e7d5      	b.n	800122a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800127e:	4a3f      	ldr	r2, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001288:	f7ff fd8e 	bl	8000da8 <HAL_GetTick>
 800128c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f013 0f02 	tst.w	r3, #2
 8001296:	d0c8      	beq.n	800122a <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fd86 	bl	8000da8 <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	2802      	cmp	r0, #2
 80012a0:	d9f5      	bls.n	800128e <HAL_RCC_OscConfig+0x1c6>
            return HAL_TIMEOUT;
 80012a2:	2003      	movs	r0, #3
 80012a4:	e117      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a6:	4a35      	ldr	r2, [pc, #212]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012a8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fd7a 	bl	8000da8 <HAL_GetTick>
 80012b4:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	4b31      	ldr	r3, [pc, #196]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ba:	f013 0f02 	tst.w	r3, #2
 80012be:	d006      	beq.n	80012ce <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fd72 	bl	8000da8 <HAL_GetTick>
 80012c4:	1b40      	subs	r0, r0, r5
 80012c6:	2802      	cmp	r0, #2
 80012c8:	d9f5      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
 80012ca:	2003      	movs	r0, #3
 80012cc:	e103      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	f013 0f04 	tst.w	r3, #4
 80012d4:	d07e      	beq.n	80013d4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012de:	d11e      	bne.n	800131e <HAL_RCC_OscConfig+0x256>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012f4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012fe:	d010      	beq.n	8001322 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	68a3      	ldr	r3, [r4, #8]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d021      	beq.n	800134a <HAL_RCC_OscConfig+0x282>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d13c      	bne.n	8001384 <HAL_RCC_OscConfig+0x2bc>
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800130c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	671a      	str	r2, [r3, #112]	; 0x70
 8001314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001316:	f022 0204 	bic.w	r2, r2, #4
 800131a:	671a      	str	r2, [r3, #112]	; 0x70
 800131c:	e01a      	b.n	8001354 <HAL_RCC_OscConfig+0x28c>
  FlagStatus pwrclkchanged = RESET;
 800131e:	2500      	movs	r5, #0
 8001320:	e7e9      	b.n	80012f6 <HAL_RCC_OscConfig+0x22e>
      PWR->CR1 |= PWR_CR1_DBP;
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 8001324:	6813      	ldr	r3, [r2, #0]
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800132c:	f7ff fd3c 	bl	8000da8 <HAL_GetTick>
 8001330:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f413 7f80 	tst.w	r3, #256	; 0x100
 800133a:	d1e1      	bne.n	8001300 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800133c:	f7ff fd34 	bl	8000da8 <HAL_GetTick>
 8001340:	1b80      	subs	r0, r0, r6
 8001342:	2864      	cmp	r0, #100	; 0x64
 8001344:	d9f5      	bls.n	8001332 <HAL_RCC_OscConfig+0x26a>
          return HAL_TIMEOUT;
 8001346:	2003      	movs	r0, #3
 8001348:	e0c5      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 800134c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	b35b      	cbz	r3, 80013b0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fd26 	bl	8000da8 <HAL_GetTick>
 800135c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	f013 0f02 	tst.w	r3, #2
 8001366:	d134      	bne.n	80013d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fd1e 	bl	8000da8 <HAL_GetTick>
 800136c:	1b80      	subs	r0, r0, r6
 800136e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001372:	4298      	cmp	r0, r3
 8001374:	d9f3      	bls.n	800135e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001376:	2003      	movs	r0, #3
 8001378:	e0ad      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	2b05      	cmp	r3, #5
 8001386:	d009      	beq.n	800139c <HAL_RCC_OscConfig+0x2d4>
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 800138a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	671a      	str	r2, [r3, #112]	; 0x70
 8001392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001394:	f022 0204 	bic.w	r2, r2, #4
 8001398:	671a      	str	r2, [r3, #112]	; 0x70
 800139a:	e7db      	b.n	8001354 <HAL_RCC_OscConfig+0x28c>
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 800139e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	671a      	str	r2, [r3, #112]	; 0x70
 80013a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	671a      	str	r2, [r3, #112]	; 0x70
 80013ae:	e7d1      	b.n	8001354 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fcfa 	bl	8000da8 <HAL_GetTick>
 80013b4:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	f013 0f02 	tst.w	r3, #2
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fcf2 	bl	8000da8 <HAL_GetTick>
 80013c4:	1b80      	subs	r0, r0, r6
 80013c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ca:	4298      	cmp	r0, r3
 80013cc:	d9f3      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2ee>
        {
          return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
 80013d0:	e081      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013d2:	b9f5      	cbnz	r5, 8001412 <HAL_RCC_OscConfig+0x34a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d4:	69a3      	ldr	r3, [r4, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d07c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x40c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013da:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80013dc:	6892      	ldr	r2, [r2, #8]
 80013de:	f002 020c 	and.w	r2, r2, #12
 80013e2:	2a08      	cmp	r2, #8
 80013e4:	d079      	beq.n	80014da <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d019      	beq.n	800141e <HAL_RCC_OscConfig+0x356>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fcd8 	bl	8000da8 <HAL_GetTick>
 80013f8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001402:	d063      	beq.n	80014cc <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fcd0 	bl	8000da8 <HAL_GetTick>
 8001408:	1b00      	subs	r0, r0, r4
 800140a:	2802      	cmp	r0, #2
 800140c:	d9f5      	bls.n	80013fa <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 800140e:	2003      	movs	r0, #3
 8001410:	e061      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 8001414:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	e7da      	b.n	80013d4 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 800141e:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001426:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001428:	f7ff fcbe 	bl	8000da8 <HAL_GetTick>
 800142c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001436:	d006      	beq.n	8001446 <HAL_RCC_OscConfig+0x37e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fcb6 	bl	8000da8 <HAL_GetTick>
 800143c:	1b40      	subs	r0, r0, r5
 800143e:	2802      	cmp	r0, #2
 8001440:	d9f5      	bls.n	800142e <HAL_RCC_OscConfig+0x366>
            return HAL_TIMEOUT;
 8001442:	2003      	movs	r0, #3
 8001444:	e047      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001446:	69e3      	ldr	r3, [r4, #28]
 8001448:	6a22      	ldr	r2, [r4, #32]
 800144a:	4313      	orrs	r3, r2
 800144c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800144e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001452:	fa92 f2a2 	rbit	r2, r2
 8001456:	fab2 f282 	clz	r2, r2
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	4313      	orrs	r3, r2
 8001460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001462:	0852      	lsrs	r2, r2, #1
 8001464:	3a01      	subs	r2, #1
 8001466:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800146a:	fa91 f1a1 	rbit	r1, r1
 800146e:	fab1 f181 	clz	r1, r1
 8001472:	408a      	lsls	r2, r1
 8001474:	4313      	orrs	r3, r2
 8001476:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001478:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800147c:	fa92 f2a2 	rbit	r2, r2
 8001480:	fab2 f282 	clz	r2, r2
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	4313      	orrs	r3, r2
 800148a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800148c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001490:	fa92 f2a2 	rbit	r2, r2
 8001494:	fab2 f282 	clz	r2, r2
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4313      	orrs	r3, r2
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80014a0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc7d 	bl	8000da8 <HAL_GetTick>
 80014ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x418>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fc75 	bl	8000da8 <HAL_GetTick>
 80014be:	1b00      	subs	r0, r0, r4
 80014c0:	2802      	cmp	r0, #2
 80014c2:	d9f5      	bls.n	80014b0 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 80014c4:	2003      	movs	r0, #3
 80014c6:	e006      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80014c8:	2000      	movs	r0, #0
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
 80014cc:	2000      	movs	r0, #0
 80014ce:	e002      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
}
 80014d6:	b002      	add	sp, #8
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	e7fb      	b.n	80014d6 <HAL_RCC_OscConfig+0x40e>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_RCC_GetSysClockFreq+0x88>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d03a      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x82>
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <HAL_RCC_GetSysClockFreq+0x8c>)
 80014f6:	4770      	bx	lr
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_GetSysClockFreq+0x88>)
 80014fa:	6858      	ldr	r0, [r3, #4]
 80014fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001506:	d01e      	beq.n	8001546 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_RCC_GetSysClockFreq+0x90>)
 800150a:	fbb2 f2f0 	udiv	r2, r2, r0
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_RCC_GetSysClockFreq+0x88>)
 8001510:	6858      	ldr	r0, [r3, #4]
 8001512:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001516:	4018      	ands	r0, r3
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	40d8      	lsrs	r0, r3
 8001522:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_GetSysClockFreq+0x88>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800152e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001532:	fa92 f2a2 	rbit	r2, r2
 8001536:	fab2 f282 	clz	r2, r2
 800153a:	40d3      	lsrs	r3, r2
 800153c:	3301      	adds	r3, #1
 800153e:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8001540:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001544:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001548:	fbb2 f2f0 	udiv	r2, r2, r0
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_GetSysClockFreq+0x88>)
 800154e:	6858      	ldr	r0, [r3, #4]
 8001550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001554:	4018      	ands	r0, r3
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	40d8      	lsrs	r0, r3
 8001560:	fb00 f002 	mul.w	r0, r0, r2
 8001564:	e7df      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	00f42400 	.word	0x00f42400
 8001574:	017d7840 	.word	0x017d7840

08001578 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001578:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <HAL_RCC_ClockConfig+0x174>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	428b      	cmp	r3, r1
 8001582:	d20c      	bcs.n	800159e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001584:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_RCC_ClockConfig+0x174>)
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f023 030f 	bic.w	r3, r3, #15
 800158c:	430b      	orrs	r3, r1
 800158e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	428b      	cmp	r3, r1
 8001598:	d001      	beq.n	800159e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
}
 800159c:	4770      	bx	lr
{
 800159e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	6803      	ldr	r3, [r0, #0]
 80015a2:	f013 0f02 	tst.w	r3, #2
 80015a6:	d006      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80015aa:	6893      	ldr	r3, [r2, #8]
 80015ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015b0:	6884      	ldr	r4, [r0, #8]
 80015b2:	4323      	orrs	r3, r4
 80015b4:	6093      	str	r3, [r2, #8]
 80015b6:	460c      	mov	r4, r1
 80015b8:	4605      	mov	r5, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	6803      	ldr	r3, [r0, #0]
 80015bc:	f013 0f01 	tst.w	r3, #1
 80015c0:	d052      	beq.n	8001668 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	6843      	ldr	r3, [r0, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d023      	beq.n	8001610 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d028      	beq.n	800161e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f012 0f02 	tst.w	r2, #2
 80015d4:	f000 8088 	beq.w	80016e8 <HAL_RCC_ClockConfig+0x170>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d8:	4945      	ldr	r1, [pc, #276]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80015da:	688a      	ldr	r2, [r1, #8]
 80015dc:	f022 0203 	bic.w	r2, r2, #3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015e4:	f7ff fbe0 	bl	8000da8 <HAL_GetTick>
 80015e8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	686b      	ldr	r3, [r5, #4]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d01d      	beq.n	800162c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d02a      	beq.n	800164a <HAL_RCC_ClockConfig+0xd2>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f013 0f0c 	tst.w	r3, #12
 80015fc:	d034      	beq.n	8001668 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff fbd3 	bl	8000da8 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	f241 3388 	movw	r3, #5000	; 0x1388
 8001608:	4298      	cmp	r0, r3
 800160a:	d9f3      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800160c:	2003      	movs	r0, #3
 800160e:	e06a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001618:	d1de      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
 800161c:	e063      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4a34      	ldr	r2, [pc, #208]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001626:	d1d7      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
 800162a:	e05c      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	d017      	beq.n	8001668 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001638:	f7ff fbb6 	bl	8000da8 <HAL_GetTick>
 800163c:	1b80      	subs	r0, r0, r6
 800163e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001642:	4298      	cmp	r0, r3
 8001644:	d9f2      	bls.n	800162c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001646:	2003      	movs	r0, #3
 8001648:	e04d      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d008      	beq.n	8001668 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7ff fba7 	bl	8000da8 <HAL_GetTick>
 800165a:	1b80      	subs	r0, r0, r6
 800165c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001660:	4298      	cmp	r0, r3
 8001662:	d9f2      	bls.n	800164a <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001664:	2003      	movs	r0, #3
 8001666:	e03e      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x174>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	42a3      	cmp	r3, r4
 8001672:	d90c      	bls.n	800168e <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_RCC_ClockConfig+0x174>)
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	f023 030f 	bic.w	r3, r3, #15
 800167c:	4323      	orrs	r3, r4
 800167e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	42a3      	cmp	r3, r4
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e02b      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f013 0f04 	tst.w	r3, #4
 8001694:	d006      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001696:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 8001698:	6893      	ldr	r3, [r2, #8]
 800169a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800169e:	68e9      	ldr	r1, [r5, #12]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	f013 0f08 	tst.w	r3, #8
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80016ae:	6893      	ldr	r3, [r2, #8]
 80016b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016b4:	6929      	ldr	r1, [r5, #16]
 80016b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80016bc:	f7ff ff12 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x178>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c8:	22f0      	movs	r2, #240	; 0xf0
 80016ca:	fa92 f2a2 	rbit	r2, r2
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	40d3      	lsrs	r3, r2
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_RCC_ClockConfig+0x17c>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	40d8      	lsrs	r0, r3
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_RCC_ClockConfig+0x180>)
 80016dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016de:	200f      	movs	r0, #15
 80016e0:	f7ff fb32 	bl	8000d48 <HAL_InitTick>
  return HAL_OK;
 80016e4:	2000      	movs	r0, #0
}
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
 80016ea:	e7fc      	b.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080030a4 	.word	0x080030a4
 80016f8:	20000000 	.word	0x20000000

080016fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80016fc:	4b01      	ldr	r3, [pc, #4]	; (8001704 <HAL_RCC_GetHCLKFreq+0x8>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000000 	.word	0x20000000

08001708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001708:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800170a:	f7ff fff7 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001716:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800171a:	fa92 f2a2 	rbit	r2, r2
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	40d3      	lsrs	r3, r2
 8001724:	4a02      	ldr	r2, [pc, #8]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
}
 8001728:	40d8      	lsrs	r0, r3
 800172a:	bd08      	pop	{r3, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	080030b4 	.word	0x080030b4

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001736:	f7ff ffe1 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001742:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001746:	fa92 f2a2 	rbit	r2, r2
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	40d3      	lsrs	r3, r2
 8001750:	4a02      	ldr	r2, [pc, #8]	; (800175c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001754:	40d8      	lsrs	r0, r3
 8001756:	bd08      	pop	{r3, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	080030b4 	.word	0x080030b4

08001760 <HAL_RNG_MspInit>:
  UNUSED(hrng);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8001760:	4770      	bx	lr

08001762 <HAL_RNG_Init>:
  if(hrng == NULL)
 8001762:	b1c0      	cbz	r0, 8001796 <HAL_RNG_Init+0x34>
{ 
 8001764:	b510      	push	{r4, lr}
 8001766:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 8001768:	7a03      	ldrb	r3, [r0, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d015      	beq.n	800179a <HAL_RNG_Init+0x38>
 800176e:	2301      	movs	r3, #1
 8001770:	7203      	strb	r3, [r0, #8]
  if(hrng->State == HAL_RNG_STATE_RESET)
 8001772:	7a43      	ldrb	r3, [r0, #9]
 8001774:	b15b      	cbz	r3, 800178e <HAL_RNG_Init+0x2c>
  hrng->State = HAL_RNG_STATE_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_ENABLE(hrng);
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6813      	ldr	r3, [r2, #0]
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 8001784:	2301      	movs	r3, #1
 8001786:	7263      	strb	r3, [r4, #9]
  __HAL_UNLOCK(hrng);
 8001788:	2000      	movs	r0, #0
 800178a:	7220      	strb	r0, [r4, #8]
}
 800178c:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 800178e:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8001790:	f7ff ffe6 	bl	8001760 <HAL_RNG_MspInit>
 8001794:	e7ef      	b.n	8001776 <HAL_RNG_Init+0x14>
    return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
}
 8001798:	4770      	bx	lr
  __HAL_LOCK(hrng);
 800179a:	2002      	movs	r0, #2
 800179c:	e7f6      	b.n	800178c <HAL_RNG_Init+0x2a>

0800179e <HAL_RNG_MspDeInit>:
  UNUSED(hrng);
  
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspDeInit must be implemented in the user file.
   */
}
 800179e:	4770      	bx	lr

080017a0 <HAL_RNG_DeInit>:
  if(hrng == NULL)
 80017a0:	b188      	cbz	r0, 80017c6 <HAL_RNG_DeInit+0x26>
{ 
 80017a2:	b510      	push	{r4, lr}
 80017a4:	4604      	mov	r4, r0
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 80017a6:	6802      	ldr	r2, [r0, #0]
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f023 030c 	bic.w	r3, r3, #12
 80017ae:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80017b0:	6802      	ldr	r2, [r0, #0]
 80017b2:	6853      	ldr	r3, [r2, #4]
 80017b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80017b8:	6053      	str	r3, [r2, #4]
  HAL_RNG_MspDeInit(hrng);
 80017ba:	f7ff fff0 	bl	800179e <HAL_RNG_MspDeInit>
  hrng->State = HAL_RNG_STATE_RESET; 
 80017be:	2000      	movs	r0, #0
 80017c0:	7260      	strb	r0, [r4, #9]
  __HAL_UNLOCK(hrng);
 80017c2:	7220      	strb	r0, [r4, #8]
}
 80017c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
}
 80017c8:	4770      	bx	lr

080017ca <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart = 0;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng); 
 80017ca:	7a03      	ldrb	r3, [r0, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d028      	beq.n	8001822 <HAL_RNG_GenerateRandomNumber+0x58>
{
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	460d      	mov	r5, r1
 80017d4:	4604      	mov	r4, r0
  __HAL_LOCK(hrng); 
 80017d6:	2301      	movs	r3, #1
 80017d8:	7203      	strb	r3, [r0, #8]
  
  /* Check RNG peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 80017da:	7a43      	ldrb	r3, [r0, #9]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d003      	beq.n	80017ea <HAL_RNG_GenerateRandomNumber+0x20>
  
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    status = HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80017e4:	2300      	movs	r3, #0
 80017e6:	7223      	strb	r3, [r4, #8]
  
  return status;
}
 80017e8:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;  
 80017ea:	2302      	movs	r3, #2
 80017ec:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80017ee:	f7ff fadb 	bl	8000da8 <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	f012 0f01 	tst.w	r2, #1
 80017fc:	d10a      	bne.n	8001814 <HAL_RNG_GenerateRandomNumber+0x4a>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 80017fe:	f7ff fad3 	bl	8000da8 <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2802      	cmp	r0, #2
 8001806:	d9f5      	bls.n	80017f4 <HAL_RNG_GenerateRandomNumber+0x2a>
        hrng->State = HAL_RNG_STATE_ERROR;
 8001808:	2304      	movs	r3, #4
 800180a:	7263      	strb	r3, [r4, #9]
        __HAL_UNLOCK(hrng);
 800180c:	2300      	movs	r3, #0
 800180e:	7223      	strb	r3, [r4, #8]
        return HAL_TIMEOUT;
 8001810:	2003      	movs	r0, #3
 8001812:	e7e9      	b.n	80017e8 <HAL_RNG_GenerateRandomNumber+0x1e>
    hrng->RandomNumber = hrng->Instance->DR;
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	6063      	str	r3, [r4, #4]
    *random32bit = hrng->RandomNumber;
 8001818:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800181a:	2301      	movs	r3, #1
 800181c:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	2000      	movs	r0, #0
 8001820:	e7e0      	b.n	80017e4 <HAL_RNG_GenerateRandomNumber+0x1a>
  __HAL_LOCK(hrng); 
 8001822:	2002      	movs	r0, #2
}
 8001824:	4770      	bx	lr

08001826 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800182a:	4605      	mov	r5, r0
 800182c:	460f      	mov	r7, r1
 800182e:	4616      	mov	r6, r2
 8001830:	4698      	mov	r8, r3
 8001832:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	ea37 0303 	bics.w	r3, r7, r3
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	42b3      	cmp	r3, r6
 8001844:	d11d      	bne.n	8001882 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001846:	f1b4 3fff 	cmp.w	r4, #4294967295
 800184a:	d0f3      	beq.n	8001834 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800184c:	b12c      	cbz	r4, 800185a <UART_WaitOnFlagUntilTimeout+0x34>
 800184e:	f7ff faab 	bl	8000da8 <HAL_GetTick>
 8001852:	eba0 0008 	sub.w	r0, r0, r8
 8001856:	42a0      	cmp	r0, r4
 8001858:	d3ec      	bcc.n	8001834 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800185a:	682a      	ldr	r2, [r5, #0]
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001862:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001864:	682a      	ldr	r2, [r5, #0]
 8001866:	6893      	ldr	r3, [r2, #8]
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
 8001870:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001874:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001878:	2300      	movs	r3, #0
 800187a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800187e:	2003      	movs	r0, #3
 8001880:	e000      	b.n	8001884 <UART_WaitOnFlagUntilTimeout+0x5e>
      }
    }
  }
  return HAL_OK;
 8001882:	2000      	movs	r0, #0
}
 8001884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001888 <HAL_UART_Transmit>:
{
 8001888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001890:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b20      	cmp	r3, #32
 8001898:	d152      	bne.n	8001940 <HAL_UART_Transmit+0xb8>
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
 800189e:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80018a0:	fab2 f382 	clz	r3, r2
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	2900      	cmp	r1, #0
 80018a8:	bf08      	it	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d14c      	bne.n	800194a <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80018b0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d04a      	beq.n	800194e <HAL_UART_Transmit+0xc6>
 80018b8:	2301      	movs	r3, #1
 80018ba:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018c2:	2321      	movs	r3, #33	; 0x21
 80018c4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa6e 	bl	8000da8 <HAL_GetTick>
 80018cc:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80018ce:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80018d2:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80018d6:	e003      	b.n	80018e0 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80018d8:	782a      	ldrb	r2, [r5, #0]
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
 80018de:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 80018e0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b1db      	cbz	r3, 8001920 <HAL_UART_Transmit+0x98>
      huart->TxXferCount--;
 80018e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f4:	9600      	str	r6, [sp, #0]
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ff92 	bl	8001826 <UART_WaitOnFlagUntilTimeout>
 8001902:	bb30      	cbnz	r0, 8001952 <HAL_UART_Transmit+0xca>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190a:	d1e5      	bne.n	80018d8 <HAL_UART_Transmit+0x50>
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e2      	bne.n	80018d8 <HAL_UART_Transmit+0x50>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001912:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800191e:	e7df      	b.n	80018e0 <HAL_UART_Transmit+0x58>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001920:	9600      	str	r6, [sp, #0]
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	2140      	movs	r1, #64	; 0x40
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff ff7c 	bl	8001826 <UART_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	b988      	cbnz	r0, 8001956 <HAL_UART_Transmit+0xce>
    huart->gState = HAL_UART_STATE_READY;
 8001932:	2220      	movs	r2, #32
 8001934:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001938:	2200      	movs	r2, #0
 800193a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 800193e:	e000      	b.n	8001942 <HAL_UART_Transmit+0xba>
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
}
 8001942:	4618      	mov	r0, r3
 8001944:	b002      	add	sp, #8
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e7f9      	b.n	8001942 <HAL_UART_Transmit+0xba>
    __HAL_LOCK(huart);
 800194e:	2302      	movs	r3, #2
 8001950:	e7f7      	b.n	8001942 <HAL_UART_Transmit+0xba>
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e7f5      	b.n	8001942 <HAL_UART_Transmit+0xba>
      return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e7f3      	b.n	8001942 <HAL_UART_Transmit+0xba>

0800195a <HAL_UART_Receive>:
{
 800195a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001962:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	d175      	bne.n	8001a58 <HAL_UART_Receive+0xfe>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8001972:	fab2 f382 	clz	r3, r2
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2900      	cmp	r1, #0
 800197a:	bf08      	it	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d16e      	bne.n	8001a60 <HAL_UART_Receive+0x106>
    __HAL_LOCK(huart);
 8001982:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001986:	2b01      	cmp	r3, #1
 8001988:	d06c      	beq.n	8001a64 <HAL_UART_Receive+0x10a>
 800198a:	2301      	movs	r3, #1
 800198c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001990:	2300      	movs	r3, #0
 8001992:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001994:	2322      	movs	r3, #34	; 0x22
 8001996:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 800199a:	f7ff fa05 	bl	8000da8 <HAL_GetTick>
 800199e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80019a0:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 80019a4:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80019a8:	68a3      	ldr	r3, [r4, #8]
 80019aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ae:	d006      	beq.n	80019be <HAL_UART_Receive+0x64>
 80019b0:	b9a3      	cbnz	r3, 80019dc <HAL_UART_Receive+0x82>
 80019b2:	6923      	ldr	r3, [r4, #16]
 80019b4:	b973      	cbnz	r3, 80019d4 <HAL_UART_Receive+0x7a>
 80019b6:	23ff      	movs	r3, #255	; 0xff
 80019b8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019bc:	e011      	b.n	80019e2 <HAL_UART_Receive+0x88>
 80019be:	6923      	ldr	r3, [r4, #16]
 80019c0:	b923      	cbnz	r3, 80019cc <HAL_UART_Receive+0x72>
 80019c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80019c6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019ca:	e00a      	b.n	80019e2 <HAL_UART_Receive+0x88>
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019d2:	e006      	b.n	80019e2 <HAL_UART_Receive+0x88>
 80019d4:	237f      	movs	r3, #127	; 0x7f
 80019d6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019da:	e002      	b.n	80019e2 <HAL_UART_Receive+0x88>
 80019dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019e0:	d002      	beq.n	80019e8 <HAL_UART_Receive+0x8e>
    uhMask = huart->Mask;
 80019e2:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80019e6:	e010      	b.n	8001a0a <HAL_UART_Receive+0xb0>
    UART_MASK_COMPUTATION(huart);
 80019e8:	6923      	ldr	r3, [r4, #16]
 80019ea:	b91b      	cbnz	r3, 80019f4 <HAL_UART_Receive+0x9a>
 80019ec:	237f      	movs	r3, #127	; 0x7f
 80019ee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019f2:	e7f6      	b.n	80019e2 <HAL_UART_Receive+0x88>
 80019f4:	233f      	movs	r3, #63	; 0x3f
 80019f6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80019fa:	e7f2      	b.n	80019e2 <HAL_UART_Receive+0x88>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a00:	fa5f f388 	uxtb.w	r3, r8
 8001a04:	4013      	ands	r3, r2
 8001a06:	702b      	strb	r3, [r5, #0]
 8001a08:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 8001a0a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b1db      	cbz	r3, 8001a4a <HAL_UART_Receive+0xf0>
      huart->RxXferCount--;
 8001a12:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a1e:	9600      	str	r6, [sp, #0]
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	2120      	movs	r1, #32
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fefd 	bl	8001826 <UART_WaitOnFlagUntilTimeout>
 8001a2c:	b9e0      	cbnz	r0, 8001a68 <HAL_UART_Receive+0x10e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a2e:	68a3      	ldr	r3, [r4, #8]
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	d1e2      	bne.n	80019fc <HAL_UART_Receive+0xa2>
 8001a36:	6923      	ldr	r3, [r4, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1df      	bne.n	80019fc <HAL_UART_Receive+0xa2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	ea08 0303 	and.w	r3, r8, r3
 8001a44:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001a48:	e7df      	b.n	8001a0a <HAL_UART_Receive+0xb0>
    huart->RxState = HAL_UART_STATE_READY;
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001a56:	e000      	b.n	8001a5a <HAL_UART_Receive+0x100>
    return HAL_BUSY;
 8001a58:	2002      	movs	r0, #2
}
 8001a5a:	b002      	add	sp, #8
 8001a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001a60:	2001      	movs	r0, #1
 8001a62:	e7fa      	b.n	8001a5a <HAL_UART_Receive+0x100>
    __HAL_LOCK(huart);
 8001a64:	2002      	movs	r0, #2
 8001a66:	e7f8      	b.n	8001a5a <HAL_UART_Receive+0x100>
        return HAL_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
 8001a6a:	e7f6      	b.n	8001a5a <HAL_UART_Receive+0x100>

08001a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a70:	6883      	ldr	r3, [r0, #8]
 8001a72:	6902      	ldr	r2, [r0, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	6942      	ldr	r2, [r0, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	69c2      	ldr	r2, [r0, #28]
 8001a7c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a7e:	6801      	ldr	r1, [r0, #0]
 8001a80:	6808      	ldr	r0, [r1, #0]
 8001a82:	4a9d      	ldr	r2, [pc, #628]	; (8001cf8 <UART_SetConfig+0x28c>)
 8001a84:	4002      	ands	r2, r0
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	6853      	ldr	r3, [r2, #4]
 8001a8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a92:	68e1      	ldr	r1, [r4, #12]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001a98:	69a3      	ldr	r3, [r4, #24]
 8001a9a:	6a22      	ldr	r2, [r4, #32]
 8001a9c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a9e:	6821      	ldr	r1, [r4, #0]
 8001aa0:	688b      	ldr	r3, [r1, #8]
 8001aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	4a93      	ldr	r2, [pc, #588]	; (8001cfc <UART_SetConfig+0x290>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <UART_SetConfig+0x7a>
 8001ab2:	4a93      	ldr	r2, [pc, #588]	; (8001d00 <UART_SetConfig+0x294>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d02a      	beq.n	8001b0e <UART_SetConfig+0xa2>
 8001ab8:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <UART_SetConfig+0x298>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d040      	beq.n	8001b40 <UART_SetConfig+0xd4>
 8001abe:	4a92      	ldr	r2, [pc, #584]	; (8001d08 <UART_SetConfig+0x29c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d055      	beq.n	8001b70 <UART_SetConfig+0x104>
 8001ac4:	4a91      	ldr	r2, [pc, #580]	; (8001d0c <UART_SetConfig+0x2a0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d06a      	beq.n	8001ba0 <UART_SetConfig+0x134>
 8001aca:	4a91      	ldr	r2, [pc, #580]	; (8001d10 <UART_SetConfig+0x2a4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	f000 8082 	beq.w	8001bd6 <UART_SetConfig+0x16a>
 8001ad2:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <UART_SetConfig+0x2a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f000 8099 	beq.w	8001c0c <UART_SetConfig+0x1a0>
 8001ada:	4a8f      	ldr	r2, [pc, #572]	; (8001d18 <UART_SetConfig+0x2ac>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f000 80b0 	beq.w	8001c42 <UART_SetConfig+0x1d6>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	e0c9      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ae6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001aea:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	2a03      	cmp	r2, #3
 8001af4:	d803      	bhi.n	8001afe <UART_SetConfig+0x92>
 8001af6:	e8df f002 	tbb	[pc, r2]
 8001afa:	06bf      	.short	0x06bf
 8001afc:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001afe:	2210      	movs	r2, #16
 8001b00:	e0bb      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b02:	2202      	movs	r2, #2
 8001b04:	e0b9      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b06:	2204      	movs	r2, #4
 8001b08:	e0b7      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	e0b5      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b0e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001b12:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001b16:	f002 020c 	and.w	r2, r2, #12
 8001b1a:	2a0c      	cmp	r2, #12
 8001b1c:	d808      	bhi.n	8001b30 <UART_SetConfig+0xc4>
 8001b1e:	e8df f002 	tbb	[pc, r2]
 8001b22:	07ba      	.short	0x07ba
 8001b24:	070b0707 	.word	0x070b0707
 8001b28:	07090707 	.word	0x07090707
 8001b2c:	0707      	.short	0x0707
 8001b2e:	0d          	.byte	0x0d
 8001b2f:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001b30:	2210      	movs	r2, #16
 8001b32:	e0a2      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b34:	2202      	movs	r2, #2
 8001b36:	e0a0      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b38:	2204      	movs	r2, #4
 8001b3a:	e09e      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	e09c      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b40:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001b44:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001b48:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001b4c:	2a10      	cmp	r2, #16
 8001b4e:	d00d      	beq.n	8001b6c <UART_SetConfig+0x100>
 8001b50:	d905      	bls.n	8001b5e <UART_SetConfig+0xf2>
 8001b52:	2a20      	cmp	r2, #32
 8001b54:	d008      	beq.n	8001b68 <UART_SetConfig+0xfc>
 8001b56:	2a30      	cmp	r2, #48	; 0x30
 8001b58:	d104      	bne.n	8001b64 <UART_SetConfig+0xf8>
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	e08d      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b5e:	b90a      	cbnz	r2, 8001b64 <UART_SetConfig+0xf8>
 8001b60:	2200      	movs	r2, #0
 8001b62:	e08a      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001b64:	2210      	movs	r2, #16
 8001b66:	e088      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b68:	2202      	movs	r2, #2
 8001b6a:	e086      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	e084      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b70:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001b74:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001b78:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001b7c:	2a40      	cmp	r2, #64	; 0x40
 8001b7e:	d00d      	beq.n	8001b9c <UART_SetConfig+0x130>
 8001b80:	d905      	bls.n	8001b8e <UART_SetConfig+0x122>
 8001b82:	2a80      	cmp	r2, #128	; 0x80
 8001b84:	d008      	beq.n	8001b98 <UART_SetConfig+0x12c>
 8001b86:	2ac0      	cmp	r2, #192	; 0xc0
 8001b88:	d104      	bne.n	8001b94 <UART_SetConfig+0x128>
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	e075      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b8e:	b90a      	cbnz	r2, 8001b94 <UART_SetConfig+0x128>
 8001b90:	2200      	movs	r2, #0
 8001b92:	e072      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001b94:	2210      	movs	r2, #16
 8001b96:	e070      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b98:	2202      	movs	r2, #2
 8001b9a:	e06e      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	e06c      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001ba0:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001ba4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001ba8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001bb0:	d00f      	beq.n	8001bd2 <UART_SetConfig+0x166>
 8001bb2:	d907      	bls.n	8001bc4 <UART_SetConfig+0x158>
 8001bb4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001bb8:	d009      	beq.n	8001bce <UART_SetConfig+0x162>
 8001bba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001bbe:	d104      	bne.n	8001bca <UART_SetConfig+0x15e>
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	e05a      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001bc4:	b90a      	cbnz	r2, 8001bca <UART_SetConfig+0x15e>
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	e057      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001bca:	2210      	movs	r2, #16
 8001bcc:	e055      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bce:	2202      	movs	r2, #2
 8001bd0:	e053      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	e051      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001bd6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001bda:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001bde:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001be2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001be6:	d00f      	beq.n	8001c08 <UART_SetConfig+0x19c>
 8001be8:	d907      	bls.n	8001bfa <UART_SetConfig+0x18e>
 8001bea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001bee:	d009      	beq.n	8001c04 <UART_SetConfig+0x198>
 8001bf0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001bf4:	d104      	bne.n	8001c00 <UART_SetConfig+0x194>
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	e03f      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001bfa:	b90a      	cbnz	r2, 8001c00 <UART_SetConfig+0x194>
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	e03c      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c00:	2210      	movs	r2, #16
 8001c02:	e03a      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c04:	2202      	movs	r2, #2
 8001c06:	e038      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c08:	2204      	movs	r2, #4
 8001c0a:	e036      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c0c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001c10:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c14:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001c18:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c1c:	d00f      	beq.n	8001c3e <UART_SetConfig+0x1d2>
 8001c1e:	d907      	bls.n	8001c30 <UART_SetConfig+0x1c4>
 8001c20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c24:	d009      	beq.n	8001c3a <UART_SetConfig+0x1ce>
 8001c26:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001c2a:	d104      	bne.n	8001c36 <UART_SetConfig+0x1ca>
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	e024      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c30:	b90a      	cbnz	r2, 8001c36 <UART_SetConfig+0x1ca>
 8001c32:	2200      	movs	r2, #0
 8001c34:	e021      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c36:	2210      	movs	r2, #16
 8001c38:	e01f      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	e01d      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c3e:	2204      	movs	r2, #4
 8001c40:	e01b      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c42:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001c46:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c4a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001c4e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001c52:	d00f      	beq.n	8001c74 <UART_SetConfig+0x208>
 8001c54:	d907      	bls.n	8001c66 <UART_SetConfig+0x1fa>
 8001c56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c5a:	d009      	beq.n	8001c70 <UART_SetConfig+0x204>
 8001c5c:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001c60:	d104      	bne.n	8001c6c <UART_SetConfig+0x200>
 8001c62:	2208      	movs	r2, #8
 8001c64:	e009      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c66:	b90a      	cbnz	r2, 8001c6c <UART_SetConfig+0x200>
 8001c68:	2200      	movs	r2, #0
 8001c6a:	e006      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	e004      	b.n	8001c7a <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c70:	2202      	movs	r2, #2
 8001c72:	e002      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c74:	2204      	movs	r2, #4
 8001c76:	e000      	b.n	8001c7a <UART_SetConfig+0x20e>
 8001c78:	2201      	movs	r2, #1

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c7a:	69e1      	ldr	r1, [r4, #28]
 8001c7c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c80:	d00b      	beq.n	8001c9a <UART_SetConfig+0x22e>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001c82:	2a08      	cmp	r2, #8
 8001c84:	f200 809b 	bhi.w	8001dbe <UART_SetConfig+0x352>
 8001c88:	e8df f002 	tbb	[pc, r2]
 8001c8c:	99796d61 	.word	0x99796d61
 8001c90:	99999983 	.word	0x99999983
 8001c94:	8f          	.byte	0x8f
 8001c95:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c96:	2200      	movs	r2, #0
 8001c98:	e7ef      	b.n	8001c7a <UART_SetConfig+0x20e>
    switch (clocksource)
 8001c9a:	2a08      	cmp	r2, #8
 8001c9c:	d854      	bhi.n	8001d48 <UART_SetConfig+0x2dc>
 8001c9e:	e8df f002 	tbb	[pc, r2]
 8001ca2:	1705      	.short	0x1705
 8001ca4:	533f5322 	.word	0x533f5322
 8001ca8:	5353      	.short	0x5353
 8001caa:	4a          	.byte	0x4a
 8001cab:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cac:	f7ff fd2c 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	6862      	ldr	r2, [r4, #4]
 8001cb2:	0853      	lsrs	r3, r2, #1
 8001cb4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cbc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cbe:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001cc0:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cc4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001cc8:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8001cce:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cd0:	f7ff fd30 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8001cd4:	6862      	ldr	r2, [r4, #4]
 8001cd6:	0853      	lsrs	r3, r2, #1
 8001cd8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ce0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ce2:	2000      	movs	r0, #0
      break;
 8001ce4:	e7ec      	b.n	8001cc0 <UART_SetConfig+0x254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ce6:	6862      	ldr	r2, [r4, #4]
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <UART_SetConfig+0x2b0>)
 8001cea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cf4:	2000      	movs	r0, #0
      break;
 8001cf6:	e7e3      	b.n	8001cc0 <UART_SetConfig+0x254>
 8001cf8:	efff69f3 	.word	0xefff69f3
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40004400 	.word	0x40004400
 8001d04:	40004800 	.word	0x40004800
 8001d08:	40004c00 	.word	0x40004c00
 8001d0c:	40005000 	.word	0x40005000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	40007800 	.word	0x40007800
 8001d18:	40007c00 	.word	0x40007c00
 8001d1c:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d20:	f7ff fbe0 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	0853      	lsrs	r3, r2, #1
 8001d28:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d30:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d32:	2000      	movs	r0, #0
      break;
 8001d34:	e7c4      	b.n	8001cc0 <UART_SetConfig+0x254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d36:	6862      	ldr	r2, [r4, #4]
 8001d38:	0853      	lsrs	r3, r2, #1
 8001d3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d42:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d44:	2000      	movs	r0, #0
      break;
 8001d46:	e7bb      	b.n	8001cc0 <UART_SetConfig+0x254>
        ret = HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e7b8      	b.n	8001cc0 <UART_SetConfig+0x254>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d4e:	f7ff fcdb 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8001d52:	6863      	ldr	r3, [r4, #4]
 8001d54:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	b280      	uxth	r0, r0
 8001d60:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d62:	2000      	movs	r0, #0
      break;
 8001d64:	e7b3      	b.n	8001cce <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d66:	f7ff fce5 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d70:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	b280      	uxth	r0, r0
 8001d78:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d7a:	2000      	movs	r0, #0
      break;
 8001d7c:	e7a7      	b.n	8001cce <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d7e:	6861      	ldr	r1, [r4, #4]
 8001d80:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <UART_SetConfig+0x358>)
 8001d82:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8001d86:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d8e:	2000      	movs	r0, #0
      break;
 8001d90:	e79d      	b.n	8001cce <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d92:	f7ff fba7 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 8001d96:	6863      	ldr	r3, [r4, #4]
 8001d98:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	b280      	uxth	r0, r0
 8001da4:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001da6:	2000      	movs	r0, #0
      break;
 8001da8:	e791      	b.n	8001cce <UART_SetConfig+0x262>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001daa:	6861      	ldr	r1, [r4, #4]
 8001dac:	084a      	lsrs	r2, r1, #1
 8001dae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001db2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001db6:	b292      	uxth	r2, r2
 8001db8:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dba:	2000      	movs	r0, #0
      break;
 8001dbc:	e787      	b.n	8001cce <UART_SetConfig+0x262>
        ret = HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e785      	b.n	8001cce <UART_SetConfig+0x262>
 8001dc2:	bf00      	nop
 8001dc4:	00f42400 	.word	0x00f42400

08001dc8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dca:	f013 0f01 	tst.w	r3, #1
 8001dce:	d006      	beq.n	8001dde <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001dd0:	6802      	ldr	r2, [r0, #0]
 8001dd2:	6853      	ldr	r3, [r2, #4]
 8001dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dd8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001de0:	f013 0f02 	tst.w	r3, #2
 8001de4:	d006      	beq.n	8001df4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001de6:	6802      	ldr	r2, [r0, #0]
 8001de8:	6853      	ldr	r3, [r2, #4]
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001df4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df6:	f013 0f04 	tst.w	r3, #4
 8001dfa:	d006      	beq.n	8001e0a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dfc:	6802      	ldr	r2, [r0, #0]
 8001dfe:	6853      	ldr	r3, [r2, #4]
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e06:	430b      	orrs	r3, r1
 8001e08:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e0c:	f013 0f08 	tst.w	r3, #8
 8001e10:	d006      	beq.n	8001e20 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	6853      	ldr	r3, [r2, #4]
 8001e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e1a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e22:	f013 0f10 	tst.w	r3, #16
 8001e26:	d006      	beq.n	8001e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e28:	6802      	ldr	r2, [r0, #0]
 8001e2a:	6893      	ldr	r3, [r2, #8]
 8001e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e30:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e36:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e38:	f013 0f20 	tst.w	r3, #32
 8001e3c:	d006      	beq.n	8001e4c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e3e:	6802      	ldr	r2, [r0, #0]
 8001e40:	6893      	ldr	r3, [r2, #8]
 8001e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e52:	d00a      	beq.n	8001e6a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6853      	ldr	r3, [r2, #4]
 8001e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e68:	d00b      	beq.n	8001e82 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e70:	d006      	beq.n	8001e80 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e72:	6802      	ldr	r2, [r0, #0]
 8001e74:	6853      	ldr	r3, [r2, #4]
 8001e76:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e7a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6053      	str	r3, [r2, #4]
  }
}
 8001e80:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	6853      	ldr	r3, [r2, #4]
 8001e86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e8a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6053      	str	r3, [r2, #4]
 8001e90:	e7eb      	b.n	8001e6a <UART_AdvFeatureConfig+0xa2>

08001e92 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e92:	b510      	push	{r4, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001e9c:	f7fe ff84 	bl	8000da8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f012 0f08 	tst.w	r2, #8
 8001ea8:	d109      	bne.n	8001ebe <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8001eb0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ebe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff fcaa 	bl	8001826 <UART_WaitOnFlagUntilTimeout>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d0e9      	beq.n	8001eaa <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	e7ef      	b.n	8001eba <UART_CheckIdleState+0x28>

08001eda <HAL_UART_Init>:
  if(huart == NULL)
 8001eda:	b378      	cbz	r0, 8001f3c <HAL_UART_Init+0x62>
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ee0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001ee4:	b30b      	cbz	r3, 8001f2a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ee6:	2324      	movs	r3, #36	; 0x24
 8001ee8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001eec:	6822      	ldr	r2, [r4, #0]
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fdb8 	bl	8001a6c <UART_SetConfig>
 8001efc:	2801      	cmp	r0, #1
 8001efe:	d013      	beq.n	8001f28 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f02:	b9bb      	cbnz	r3, 8001f34 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f04:	6822      	ldr	r2, [r4, #0]
 8001f06:	6853      	ldr	r3, [r2, #4]
 8001f08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f0c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	6822      	ldr	r2, [r4, #0]
 8001f10:	6893      	ldr	r3, [r2, #8]
 8001f12:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001f16:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001f18:	6822      	ldr	r2, [r4, #0]
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ffb5 	bl	8001e92 <UART_CheckIdleState>
}
 8001f28:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001f2a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001f2e:	f7fe fe1d 	bl	8000b6c <HAL_UART_MspInit>
 8001f32:	e7d8      	b.n	8001ee6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff47 	bl	8001dc8 <UART_AdvFeatureConfig>
 8001f3a:	e7e3      	b.n	8001f04 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
}
 8001f3e:	4770      	bx	lr

08001f40 <__sflush_r>:
 8001f40:	898a      	ldrh	r2, [r1, #12]
 8001f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f46:	4605      	mov	r5, r0
 8001f48:	0710      	lsls	r0, r2, #28
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	d458      	bmi.n	8002000 <__sflush_r+0xc0>
 8001f4e:	684b      	ldr	r3, [r1, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc05      	bgt.n	8001f60 <__sflush_r+0x20>
 8001f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	dc02      	bgt.n	8001f60 <__sflush_r+0x20>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	d0f9      	beq.n	8001f5a <__sflush_r+0x1a>
 8001f66:	2300      	movs	r3, #0
 8001f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f6c:	682f      	ldr	r7, [r5, #0]
 8001f6e:	6a21      	ldr	r1, [r4, #32]
 8001f70:	602b      	str	r3, [r5, #0]
 8001f72:	d032      	beq.n	8001fda <__sflush_r+0x9a>
 8001f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f76:	89a3      	ldrh	r3, [r4, #12]
 8001f78:	075a      	lsls	r2, r3, #29
 8001f7a:	d505      	bpl.n	8001f88 <__sflush_r+0x48>
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	1ac0      	subs	r0, r0, r3
 8001f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f82:	b10b      	cbz	r3, 8001f88 <__sflush_r+0x48>
 8001f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f86:	1ac0      	subs	r0, r0, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f8e:	6a21      	ldr	r1, [r4, #32]
 8001f90:	4628      	mov	r0, r5
 8001f92:	47b0      	blx	r6
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	d106      	bne.n	8001fa8 <__sflush_r+0x68>
 8001f9a:	6829      	ldr	r1, [r5, #0]
 8001f9c:	291d      	cmp	r1, #29
 8001f9e:	d848      	bhi.n	8002032 <__sflush_r+0xf2>
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <__sflush_r+0x108>)
 8001fa2:	40ca      	lsrs	r2, r1
 8001fa4:	07d6      	lsls	r6, r2, #31
 8001fa6:	d544      	bpl.n	8002032 <__sflush_r+0xf2>
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6062      	str	r2, [r4, #4]
 8001fac:	04d9      	lsls	r1, r3, #19
 8001fae:	6922      	ldr	r2, [r4, #16]
 8001fb0:	6022      	str	r2, [r4, #0]
 8001fb2:	d504      	bpl.n	8001fbe <__sflush_r+0x7e>
 8001fb4:	1c42      	adds	r2, r0, #1
 8001fb6:	d101      	bne.n	8001fbc <__sflush_r+0x7c>
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	b903      	cbnz	r3, 8001fbe <__sflush_r+0x7e>
 8001fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8001fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fc0:	602f      	str	r7, [r5, #0]
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d0c9      	beq.n	8001f5a <__sflush_r+0x1a>
 8001fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fca:	4299      	cmp	r1, r3
 8001fcc:	d002      	beq.n	8001fd4 <__sflush_r+0x94>
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 fa1a 	bl	8002408 <_free_r>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8001fd8:	e7c0      	b.n	8001f5c <__sflush_r+0x1c>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	4628      	mov	r0, r5
 8001fde:	47b0      	blx	r6
 8001fe0:	1c41      	adds	r1, r0, #1
 8001fe2:	d1c8      	bne.n	8001f76 <__sflush_r+0x36>
 8001fe4:	682b      	ldr	r3, [r5, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0c5      	beq.n	8001f76 <__sflush_r+0x36>
 8001fea:	2b1d      	cmp	r3, #29
 8001fec:	d001      	beq.n	8001ff2 <__sflush_r+0xb2>
 8001fee:	2b16      	cmp	r3, #22
 8001ff0:	d101      	bne.n	8001ff6 <__sflush_r+0xb6>
 8001ff2:	602f      	str	r7, [r5, #0]
 8001ff4:	e7b1      	b.n	8001f5a <__sflush_r+0x1a>
 8001ff6:	89a3      	ldrh	r3, [r4, #12]
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffc:	81a3      	strh	r3, [r4, #12]
 8001ffe:	e7ad      	b.n	8001f5c <__sflush_r+0x1c>
 8002000:	690f      	ldr	r7, [r1, #16]
 8002002:	2f00      	cmp	r7, #0
 8002004:	d0a9      	beq.n	8001f5a <__sflush_r+0x1a>
 8002006:	0793      	lsls	r3, r2, #30
 8002008:	680e      	ldr	r6, [r1, #0]
 800200a:	bf08      	it	eq
 800200c:	694b      	ldreq	r3, [r1, #20]
 800200e:	600f      	str	r7, [r1, #0]
 8002010:	bf18      	it	ne
 8002012:	2300      	movne	r3, #0
 8002014:	eba6 0807 	sub.w	r8, r6, r7
 8002018:	608b      	str	r3, [r1, #8]
 800201a:	f1b8 0f00 	cmp.w	r8, #0
 800201e:	dd9c      	ble.n	8001f5a <__sflush_r+0x1a>
 8002020:	4643      	mov	r3, r8
 8002022:	463a      	mov	r2, r7
 8002024:	6a21      	ldr	r1, [r4, #32]
 8002026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002028:	4628      	mov	r0, r5
 800202a:	47b0      	blx	r6
 800202c:	2800      	cmp	r0, #0
 800202e:	dc06      	bgt.n	800203e <__sflush_r+0xfe>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002036:	81a3      	strh	r3, [r4, #12]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	e78e      	b.n	8001f5c <__sflush_r+0x1c>
 800203e:	4407      	add	r7, r0
 8002040:	eba8 0800 	sub.w	r8, r8, r0
 8002044:	e7e9      	b.n	800201a <__sflush_r+0xda>
 8002046:	bf00      	nop
 8002048:	20400001 	.word	0x20400001

0800204c <_fflush_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	690b      	ldr	r3, [r1, #16]
 8002050:	4605      	mov	r5, r0
 8002052:	460c      	mov	r4, r1
 8002054:	b1db      	cbz	r3, 800208e <_fflush_r+0x42>
 8002056:	b118      	cbz	r0, 8002060 <_fflush_r+0x14>
 8002058:	6983      	ldr	r3, [r0, #24]
 800205a:	b90b      	cbnz	r3, 8002060 <_fflush_r+0x14>
 800205c:	f000 f872 	bl	8002144 <__sinit>
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <_fflush_r+0x48>)
 8002062:	429c      	cmp	r4, r3
 8002064:	d109      	bne.n	800207a <_fflush_r+0x2e>
 8002066:	686c      	ldr	r4, [r5, #4]
 8002068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800206c:	b17b      	cbz	r3, 800208e <_fflush_r+0x42>
 800206e:	4621      	mov	r1, r4
 8002070:	4628      	mov	r0, r5
 8002072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002076:	f7ff bf63 	b.w	8001f40 <__sflush_r>
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_fflush_r+0x4c>)
 800207c:	429c      	cmp	r4, r3
 800207e:	d101      	bne.n	8002084 <_fflush_r+0x38>
 8002080:	68ac      	ldr	r4, [r5, #8]
 8002082:	e7f1      	b.n	8002068 <_fflush_r+0x1c>
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <_fflush_r+0x50>)
 8002086:	429c      	cmp	r4, r3
 8002088:	bf08      	it	eq
 800208a:	68ec      	ldreq	r4, [r5, #12]
 800208c:	e7ec      	b.n	8002068 <_fflush_r+0x1c>
 800208e:	2000      	movs	r0, #0
 8002090:	bd38      	pop	{r3, r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	08003204 	.word	0x08003204
 8002098:	08003224 	.word	0x08003224
 800209c:	080031e4 	.word	0x080031e4

080020a0 <fflush>:
 80020a0:	4601      	mov	r1, r0
 80020a2:	b920      	cbnz	r0, 80020ae <fflush+0xe>
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <fflush+0x18>)
 80020a6:	4905      	ldr	r1, [pc, #20]	; (80020bc <fflush+0x1c>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f000 b907 	b.w	80022bc <_fwalk_reent>
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <fflush+0x20>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	f7ff bfcb 	b.w	800204c <_fflush_r>
 80020b6:	bf00      	nop
 80020b8:	08003244 	.word	0x08003244
 80020bc:	0800204d 	.word	0x0800204d
 80020c0:	20000004 	.word	0x20000004

080020c4 <std>:
 80020c4:	2300      	movs	r3, #0
 80020c6:	b510      	push	{r4, lr}
 80020c8:	4604      	mov	r4, r0
 80020ca:	e9c0 3300 	strd	r3, r3, [r0]
 80020ce:	6083      	str	r3, [r0, #8]
 80020d0:	8181      	strh	r1, [r0, #12]
 80020d2:	6643      	str	r3, [r0, #100]	; 0x64
 80020d4:	81c2      	strh	r2, [r0, #14]
 80020d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020da:	6183      	str	r3, [r0, #24]
 80020dc:	4619      	mov	r1, r3
 80020de:	2208      	movs	r2, #8
 80020e0:	305c      	adds	r0, #92	; 0x5c
 80020e2:	f000 f989 	bl	80023f8 <memset>
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <std+0x38>)
 80020e8:	6263      	str	r3, [r4, #36]	; 0x24
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <std+0x3c>)
 80020ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <std+0x40>)
 80020f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <std+0x44>)
 80020f4:	6224      	str	r4, [r4, #32]
 80020f6:	6323      	str	r3, [r4, #48]	; 0x30
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	bf00      	nop
 80020fc:	08002681 	.word	0x08002681
 8002100:	080026a3 	.word	0x080026a3
 8002104:	080026db 	.word	0x080026db
 8002108:	080026ff 	.word	0x080026ff

0800210c <_cleanup_r>:
 800210c:	4901      	ldr	r1, [pc, #4]	; (8002114 <_cleanup_r+0x8>)
 800210e:	f000 b8d5 	b.w	80022bc <_fwalk_reent>
 8002112:	bf00      	nop
 8002114:	0800204d 	.word	0x0800204d

08002118 <__sfmoreglue>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	1e4a      	subs	r2, r1, #1
 800211c:	2568      	movs	r5, #104	; 0x68
 800211e:	4355      	muls	r5, r2
 8002120:	460e      	mov	r6, r1
 8002122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002126:	f000 f9bd 	bl	80024a4 <_malloc_r>
 800212a:	4604      	mov	r4, r0
 800212c:	b140      	cbz	r0, 8002140 <__sfmoreglue+0x28>
 800212e:	2100      	movs	r1, #0
 8002130:	e9c0 1600 	strd	r1, r6, [r0]
 8002134:	300c      	adds	r0, #12
 8002136:	60a0      	str	r0, [r4, #8]
 8002138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800213c:	f000 f95c 	bl	80023f8 <memset>
 8002140:	4620      	mov	r0, r4
 8002142:	bd70      	pop	{r4, r5, r6, pc}

08002144 <__sinit>:
 8002144:	6983      	ldr	r3, [r0, #24]
 8002146:	b510      	push	{r4, lr}
 8002148:	4604      	mov	r4, r0
 800214a:	bb33      	cbnz	r3, 800219a <__sinit+0x56>
 800214c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002150:	6503      	str	r3, [r0, #80]	; 0x50
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <__sinit+0x58>)
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <__sinit+0x5c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6282      	str	r2, [r0, #40]	; 0x28
 800215a:	4298      	cmp	r0, r3
 800215c:	bf04      	itt	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	6183      	streq	r3, [r0, #24]
 8002162:	f000 f81f 	bl	80021a4 <__sfp>
 8002166:	6060      	str	r0, [r4, #4]
 8002168:	4620      	mov	r0, r4
 800216a:	f000 f81b 	bl	80021a4 <__sfp>
 800216e:	60a0      	str	r0, [r4, #8]
 8002170:	4620      	mov	r0, r4
 8002172:	f000 f817 	bl	80021a4 <__sfp>
 8002176:	2200      	movs	r2, #0
 8002178:	60e0      	str	r0, [r4, #12]
 800217a:	2104      	movs	r1, #4
 800217c:	6860      	ldr	r0, [r4, #4]
 800217e:	f7ff ffa1 	bl	80020c4 <std>
 8002182:	2201      	movs	r2, #1
 8002184:	2109      	movs	r1, #9
 8002186:	68a0      	ldr	r0, [r4, #8]
 8002188:	f7ff ff9c 	bl	80020c4 <std>
 800218c:	2202      	movs	r2, #2
 800218e:	2112      	movs	r1, #18
 8002190:	68e0      	ldr	r0, [r4, #12]
 8002192:	f7ff ff97 	bl	80020c4 <std>
 8002196:	2301      	movs	r3, #1
 8002198:	61a3      	str	r3, [r4, #24]
 800219a:	bd10      	pop	{r4, pc}
 800219c:	08003244 	.word	0x08003244
 80021a0:	0800210d 	.word	0x0800210d

080021a4 <__sfp>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <__sfp+0x70>)
 80021a8:	681e      	ldr	r6, [r3, #0]
 80021aa:	69b3      	ldr	r3, [r6, #24]
 80021ac:	4607      	mov	r7, r0
 80021ae:	b913      	cbnz	r3, 80021b6 <__sfp+0x12>
 80021b0:	4630      	mov	r0, r6
 80021b2:	f7ff ffc7 	bl	8002144 <__sinit>
 80021b6:	3648      	adds	r6, #72	; 0x48
 80021b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021bc:	3b01      	subs	r3, #1
 80021be:	d503      	bpl.n	80021c8 <__sfp+0x24>
 80021c0:	6833      	ldr	r3, [r6, #0]
 80021c2:	b133      	cbz	r3, 80021d2 <__sfp+0x2e>
 80021c4:	6836      	ldr	r6, [r6, #0]
 80021c6:	e7f7      	b.n	80021b8 <__sfp+0x14>
 80021c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021cc:	b16d      	cbz	r5, 80021ea <__sfp+0x46>
 80021ce:	3468      	adds	r4, #104	; 0x68
 80021d0:	e7f4      	b.n	80021bc <__sfp+0x18>
 80021d2:	2104      	movs	r1, #4
 80021d4:	4638      	mov	r0, r7
 80021d6:	f7ff ff9f 	bl	8002118 <__sfmoreglue>
 80021da:	6030      	str	r0, [r6, #0]
 80021dc:	2800      	cmp	r0, #0
 80021de:	d1f1      	bne.n	80021c4 <__sfp+0x20>
 80021e0:	230c      	movs	r3, #12
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4604      	mov	r4, r0
 80021e6:	4620      	mov	r0, r4
 80021e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <__sfp+0x74>)
 80021ec:	6665      	str	r5, [r4, #100]	; 0x64
 80021ee:	e9c4 5500 	strd	r5, r5, [r4]
 80021f2:	60a5      	str	r5, [r4, #8]
 80021f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80021f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80021fc:	2208      	movs	r2, #8
 80021fe:	4629      	mov	r1, r5
 8002200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002204:	f000 f8f8 	bl	80023f8 <memset>
 8002208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800220c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002210:	e7e9      	b.n	80021e6 <__sfp+0x42>
 8002212:	bf00      	nop
 8002214:	08003244 	.word	0x08003244
 8002218:	ffff0001 	.word	0xffff0001

0800221c <_fputs_r>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	460e      	mov	r6, r1
 8002220:	4614      	mov	r4, r2
 8002222:	4605      	mov	r5, r0
 8002224:	b118      	cbz	r0, 800222e <_fputs_r+0x12>
 8002226:	6983      	ldr	r3, [r0, #24]
 8002228:	b90b      	cbnz	r3, 800222e <_fputs_r+0x12>
 800222a:	f7ff ff8b 	bl	8002144 <__sinit>
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <_fputs_r+0x84>)
 8002230:	429c      	cmp	r4, r3
 8002232:	d10b      	bne.n	800224c <_fputs_r+0x30>
 8002234:	686c      	ldr	r4, [r5, #4]
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	071b      	lsls	r3, r3, #28
 800223a:	d511      	bpl.n	8002260 <_fputs_r+0x44>
 800223c:	6923      	ldr	r3, [r4, #16]
 800223e:	b17b      	cbz	r3, 8002260 <_fputs_r+0x44>
 8002240:	3e01      	subs	r6, #1
 8002242:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002246:	b9a1      	cbnz	r1, 8002272 <_fputs_r+0x56>
 8002248:	4608      	mov	r0, r1
 800224a:	e011      	b.n	8002270 <_fputs_r+0x54>
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <_fputs_r+0x88>)
 800224e:	429c      	cmp	r4, r3
 8002250:	d101      	bne.n	8002256 <_fputs_r+0x3a>
 8002252:	68ac      	ldr	r4, [r5, #8]
 8002254:	e7ef      	b.n	8002236 <_fputs_r+0x1a>
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <_fputs_r+0x8c>)
 8002258:	429c      	cmp	r4, r3
 800225a:	bf08      	it	eq
 800225c:	68ec      	ldreq	r4, [r5, #12]
 800225e:	e7ea      	b.n	8002236 <_fputs_r+0x1a>
 8002260:	4621      	mov	r1, r4
 8002262:	4628      	mov	r0, r5
 8002264:	f000 fab4 	bl	80027d0 <__swsetup_r>
 8002268:	2800      	cmp	r0, #0
 800226a:	d0e9      	beq.n	8002240 <_fputs_r+0x24>
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	bd70      	pop	{r4, r5, r6, pc}
 8002272:	68a3      	ldr	r3, [r4, #8]
 8002274:	3b01      	subs	r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	60a3      	str	r3, [r4, #8]
 800227a:	da04      	bge.n	8002286 <_fputs_r+0x6a>
 800227c:	69a2      	ldr	r2, [r4, #24]
 800227e:	4293      	cmp	r3, r2
 8002280:	db06      	blt.n	8002290 <_fputs_r+0x74>
 8002282:	290a      	cmp	r1, #10
 8002284:	d004      	beq.n	8002290 <_fputs_r+0x74>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	6022      	str	r2, [r4, #0]
 800228c:	7019      	strb	r1, [r3, #0]
 800228e:	e7d8      	b.n	8002242 <_fputs_r+0x26>
 8002290:	4622      	mov	r2, r4
 8002292:	4628      	mov	r0, r5
 8002294:	f000 fa38 	bl	8002708 <__swbuf_r>
 8002298:	3001      	adds	r0, #1
 800229a:	d1d2      	bne.n	8002242 <_fputs_r+0x26>
 800229c:	e7e6      	b.n	800226c <_fputs_r+0x50>
 800229e:	bf00      	nop
 80022a0:	08003204 	.word	0x08003204
 80022a4:	08003224 	.word	0x08003224
 80022a8:	080031e4 	.word	0x080031e4

080022ac <fputs>:
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <fputs+0xc>)
 80022ae:	460a      	mov	r2, r1
 80022b0:	4601      	mov	r1, r0
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	f7ff bfb2 	b.w	800221c <_fputs_r>
 80022b8:	20000004 	.word	0x20000004

080022bc <_fwalk_reent>:
 80022bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c0:	4680      	mov	r8, r0
 80022c2:	4689      	mov	r9, r1
 80022c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022c8:	2600      	movs	r6, #0
 80022ca:	b914      	cbnz	r4, 80022d2 <_fwalk_reent+0x16>
 80022cc:	4630      	mov	r0, r6
 80022ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80022d6:	3f01      	subs	r7, #1
 80022d8:	d501      	bpl.n	80022de <_fwalk_reent+0x22>
 80022da:	6824      	ldr	r4, [r4, #0]
 80022dc:	e7f5      	b.n	80022ca <_fwalk_reent+0xe>
 80022de:	89ab      	ldrh	r3, [r5, #12]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d907      	bls.n	80022f4 <_fwalk_reent+0x38>
 80022e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022e8:	3301      	adds	r3, #1
 80022ea:	d003      	beq.n	80022f4 <_fwalk_reent+0x38>
 80022ec:	4629      	mov	r1, r5
 80022ee:	4640      	mov	r0, r8
 80022f0:	47c8      	blx	r9
 80022f2:	4306      	orrs	r6, r0
 80022f4:	3568      	adds	r5, #104	; 0x68
 80022f6:	e7ee      	b.n	80022d6 <_fwalk_reent+0x1a>

080022f8 <_fwrite_r>:
 80022f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022fc:	9c08      	ldr	r4, [sp, #32]
 80022fe:	4689      	mov	r9, r1
 8002300:	4617      	mov	r7, r2
 8002302:	fb02 f803 	mul.w	r8, r2, r3
 8002306:	4606      	mov	r6, r0
 8002308:	b118      	cbz	r0, 8002312 <_fwrite_r+0x1a>
 800230a:	6983      	ldr	r3, [r0, #24]
 800230c:	b90b      	cbnz	r3, 8002312 <_fwrite_r+0x1a>
 800230e:	f7ff ff19 	bl	8002144 <__sinit>
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <_fwrite_r+0x90>)
 8002314:	429c      	cmp	r4, r3
 8002316:	d11a      	bne.n	800234e <_fwrite_r+0x56>
 8002318:	6874      	ldr	r4, [r6, #4]
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	071b      	lsls	r3, r3, #28
 800231e:	d520      	bpl.n	8002362 <_fwrite_r+0x6a>
 8002320:	6923      	ldr	r3, [r4, #16]
 8002322:	b1f3      	cbz	r3, 8002362 <_fwrite_r+0x6a>
 8002324:	2500      	movs	r5, #0
 8002326:	4545      	cmp	r5, r8
 8002328:	d029      	beq.n	800237e <_fwrite_r+0x86>
 800232a:	68a3      	ldr	r3, [r4, #8]
 800232c:	f819 1005 	ldrb.w	r1, [r9, r5]
 8002330:	3b01      	subs	r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	60a3      	str	r3, [r4, #8]
 8002336:	da04      	bge.n	8002342 <_fwrite_r+0x4a>
 8002338:	69a2      	ldr	r2, [r4, #24]
 800233a:	4293      	cmp	r3, r2
 800233c:	db19      	blt.n	8002372 <_fwrite_r+0x7a>
 800233e:	290a      	cmp	r1, #10
 8002340:	d017      	beq.n	8002372 <_fwrite_r+0x7a>
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	6022      	str	r2, [r4, #0]
 8002348:	7019      	strb	r1, [r3, #0]
 800234a:	3501      	adds	r5, #1
 800234c:	e7eb      	b.n	8002326 <_fwrite_r+0x2e>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <_fwrite_r+0x94>)
 8002350:	429c      	cmp	r4, r3
 8002352:	d101      	bne.n	8002358 <_fwrite_r+0x60>
 8002354:	68b4      	ldr	r4, [r6, #8]
 8002356:	e7e0      	b.n	800231a <_fwrite_r+0x22>
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <_fwrite_r+0x98>)
 800235a:	429c      	cmp	r4, r3
 800235c:	bf08      	it	eq
 800235e:	68f4      	ldreq	r4, [r6, #12]
 8002360:	e7db      	b.n	800231a <_fwrite_r+0x22>
 8002362:	4621      	mov	r1, r4
 8002364:	4630      	mov	r0, r6
 8002366:	f000 fa33 	bl	80027d0 <__swsetup_r>
 800236a:	2800      	cmp	r0, #0
 800236c:	d0da      	beq.n	8002324 <_fwrite_r+0x2c>
 800236e:	2500      	movs	r5, #0
 8002370:	e005      	b.n	800237e <_fwrite_r+0x86>
 8002372:	4622      	mov	r2, r4
 8002374:	4630      	mov	r0, r6
 8002376:	f000 f9c7 	bl	8002708 <__swbuf_r>
 800237a:	3001      	adds	r0, #1
 800237c:	d1e5      	bne.n	800234a <_fwrite_r+0x52>
 800237e:	fbb5 f0f7 	udiv	r0, r5, r7
 8002382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002386:	bf00      	nop
 8002388:	08003204 	.word	0x08003204
 800238c:	08003224 	.word	0x08003224
 8002390:	080031e4 	.word	0x080031e4

08002394 <fwrite>:
 8002394:	b507      	push	{r0, r1, r2, lr}
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	460a      	mov	r2, r1
 800239c:	4601      	mov	r1, r0
 800239e:	4803      	ldr	r0, [pc, #12]	; (80023ac <fwrite+0x18>)
 80023a0:	6800      	ldr	r0, [r0, #0]
 80023a2:	f7ff ffa9 	bl	80022f8 <_fwrite_r>
 80023a6:	b003      	add	sp, #12
 80023a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ac:	20000004 	.word	0x20000004

080023b0 <__libc_init_array>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4e0d      	ldr	r6, [pc, #52]	; (80023e8 <__libc_init_array+0x38>)
 80023b4:	4c0d      	ldr	r4, [pc, #52]	; (80023ec <__libc_init_array+0x3c>)
 80023b6:	1ba4      	subs	r4, r4, r6
 80023b8:	10a4      	asrs	r4, r4, #2
 80023ba:	2500      	movs	r5, #0
 80023bc:	42a5      	cmp	r5, r4
 80023be:	d109      	bne.n	80023d4 <__libc_init_array+0x24>
 80023c0:	4e0b      	ldr	r6, [pc, #44]	; (80023f0 <__libc_init_array+0x40>)
 80023c2:	4c0c      	ldr	r4, [pc, #48]	; (80023f4 <__libc_init_array+0x44>)
 80023c4:	f000 fe62 	bl	800308c <_init>
 80023c8:	1ba4      	subs	r4, r4, r6
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	2500      	movs	r5, #0
 80023ce:	42a5      	cmp	r5, r4
 80023d0:	d105      	bne.n	80023de <__libc_init_array+0x2e>
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023d8:	4798      	blx	r3
 80023da:	3501      	adds	r5, #1
 80023dc:	e7ee      	b.n	80023bc <__libc_init_array+0xc>
 80023de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e2:	4798      	blx	r3
 80023e4:	3501      	adds	r5, #1
 80023e6:	e7f2      	b.n	80023ce <__libc_init_array+0x1e>
 80023e8:	0800327c 	.word	0x0800327c
 80023ec:	0800327c 	.word	0x0800327c
 80023f0:	0800327c 	.word	0x0800327c
 80023f4:	08003280 	.word	0x08003280

080023f8 <memset>:
 80023f8:	4402      	add	r2, r0
 80023fa:	4603      	mov	r3, r0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d100      	bne.n	8002402 <memset+0xa>
 8002400:	4770      	bx	lr
 8002402:	f803 1b01 	strb.w	r1, [r3], #1
 8002406:	e7f9      	b.n	80023fc <memset+0x4>

08002408 <_free_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4605      	mov	r5, r0
 800240c:	2900      	cmp	r1, #0
 800240e:	d045      	beq.n	800249c <_free_r+0x94>
 8002410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002414:	1f0c      	subs	r4, r1, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	bfb8      	it	lt
 800241a:	18e4      	addlt	r4, r4, r3
 800241c:	f000 fad4 	bl	80029c8 <__malloc_lock>
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <_free_r+0x98>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	4610      	mov	r0, r2
 8002426:	b933      	cbnz	r3, 8002436 <_free_r+0x2e>
 8002428:	6063      	str	r3, [r4, #4]
 800242a:	6014      	str	r4, [r2, #0]
 800242c:	4628      	mov	r0, r5
 800242e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002432:	f000 baca 	b.w	80029ca <__malloc_unlock>
 8002436:	42a3      	cmp	r3, r4
 8002438:	d90c      	bls.n	8002454 <_free_r+0x4c>
 800243a:	6821      	ldr	r1, [r4, #0]
 800243c:	1862      	adds	r2, r4, r1
 800243e:	4293      	cmp	r3, r2
 8002440:	bf04      	itt	eq
 8002442:	681a      	ldreq	r2, [r3, #0]
 8002444:	685b      	ldreq	r3, [r3, #4]
 8002446:	6063      	str	r3, [r4, #4]
 8002448:	bf04      	itt	eq
 800244a:	1852      	addeq	r2, r2, r1
 800244c:	6022      	streq	r2, [r4, #0]
 800244e:	6004      	str	r4, [r0, #0]
 8002450:	e7ec      	b.n	800242c <_free_r+0x24>
 8002452:	4613      	mov	r3, r2
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	b10a      	cbz	r2, 800245c <_free_r+0x54>
 8002458:	42a2      	cmp	r2, r4
 800245a:	d9fa      	bls.n	8002452 <_free_r+0x4a>
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	1858      	adds	r0, r3, r1
 8002460:	42a0      	cmp	r0, r4
 8002462:	d10b      	bne.n	800247c <_free_r+0x74>
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	4401      	add	r1, r0
 8002468:	1858      	adds	r0, r3, r1
 800246a:	4282      	cmp	r2, r0
 800246c:	6019      	str	r1, [r3, #0]
 800246e:	d1dd      	bne.n	800242c <_free_r+0x24>
 8002470:	6810      	ldr	r0, [r2, #0]
 8002472:	6852      	ldr	r2, [r2, #4]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	4401      	add	r1, r0
 8002478:	6019      	str	r1, [r3, #0]
 800247a:	e7d7      	b.n	800242c <_free_r+0x24>
 800247c:	d902      	bls.n	8002484 <_free_r+0x7c>
 800247e:	230c      	movs	r3, #12
 8002480:	602b      	str	r3, [r5, #0]
 8002482:	e7d3      	b.n	800242c <_free_r+0x24>
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	1821      	adds	r1, r4, r0
 8002488:	428a      	cmp	r2, r1
 800248a:	bf04      	itt	eq
 800248c:	6811      	ldreq	r1, [r2, #0]
 800248e:	6852      	ldreq	r2, [r2, #4]
 8002490:	6062      	str	r2, [r4, #4]
 8002492:	bf04      	itt	eq
 8002494:	1809      	addeq	r1, r1, r0
 8002496:	6021      	streq	r1, [r4, #0]
 8002498:	605c      	str	r4, [r3, #4]
 800249a:	e7c7      	b.n	800242c <_free_r+0x24>
 800249c:	bd38      	pop	{r3, r4, r5, pc}
 800249e:	bf00      	nop
 80024a0:	20000084 	.word	0x20000084

080024a4 <_malloc_r>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	1ccd      	adds	r5, r1, #3
 80024a8:	f025 0503 	bic.w	r5, r5, #3
 80024ac:	3508      	adds	r5, #8
 80024ae:	2d0c      	cmp	r5, #12
 80024b0:	bf38      	it	cc
 80024b2:	250c      	movcc	r5, #12
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	4606      	mov	r6, r0
 80024b8:	db01      	blt.n	80024be <_malloc_r+0x1a>
 80024ba:	42a9      	cmp	r1, r5
 80024bc:	d903      	bls.n	80024c6 <_malloc_r+0x22>
 80024be:	230c      	movs	r3, #12
 80024c0:	6033      	str	r3, [r6, #0]
 80024c2:	2000      	movs	r0, #0
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
 80024c6:	f000 fa7f 	bl	80029c8 <__malloc_lock>
 80024ca:	4a21      	ldr	r2, [pc, #132]	; (8002550 <_malloc_r+0xac>)
 80024cc:	6814      	ldr	r4, [r2, #0]
 80024ce:	4621      	mov	r1, r4
 80024d0:	b991      	cbnz	r1, 80024f8 <_malloc_r+0x54>
 80024d2:	4c20      	ldr	r4, [pc, #128]	; (8002554 <_malloc_r+0xb0>)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	b91b      	cbnz	r3, 80024e0 <_malloc_r+0x3c>
 80024d8:	4630      	mov	r0, r6
 80024da:	f000 f8c1 	bl	8002660 <_sbrk_r>
 80024de:	6020      	str	r0, [r4, #0]
 80024e0:	4629      	mov	r1, r5
 80024e2:	4630      	mov	r0, r6
 80024e4:	f000 f8bc 	bl	8002660 <_sbrk_r>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d124      	bne.n	8002536 <_malloc_r+0x92>
 80024ec:	230c      	movs	r3, #12
 80024ee:	6033      	str	r3, [r6, #0]
 80024f0:	4630      	mov	r0, r6
 80024f2:	f000 fa6a 	bl	80029ca <__malloc_unlock>
 80024f6:	e7e4      	b.n	80024c2 <_malloc_r+0x1e>
 80024f8:	680b      	ldr	r3, [r1, #0]
 80024fa:	1b5b      	subs	r3, r3, r5
 80024fc:	d418      	bmi.n	8002530 <_malloc_r+0x8c>
 80024fe:	2b0b      	cmp	r3, #11
 8002500:	d90f      	bls.n	8002522 <_malloc_r+0x7e>
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	50cd      	str	r5, [r1, r3]
 8002506:	18cc      	adds	r4, r1, r3
 8002508:	4630      	mov	r0, r6
 800250a:	f000 fa5e 	bl	80029ca <__malloc_unlock>
 800250e:	f104 000b 	add.w	r0, r4, #11
 8002512:	1d23      	adds	r3, r4, #4
 8002514:	f020 0007 	bic.w	r0, r0, #7
 8002518:	1ac3      	subs	r3, r0, r3
 800251a:	d0d3      	beq.n	80024c4 <_malloc_r+0x20>
 800251c:	425a      	negs	r2, r3
 800251e:	50e2      	str	r2, [r4, r3]
 8002520:	e7d0      	b.n	80024c4 <_malloc_r+0x20>
 8002522:	428c      	cmp	r4, r1
 8002524:	684b      	ldr	r3, [r1, #4]
 8002526:	bf16      	itet	ne
 8002528:	6063      	strne	r3, [r4, #4]
 800252a:	6013      	streq	r3, [r2, #0]
 800252c:	460c      	movne	r4, r1
 800252e:	e7eb      	b.n	8002508 <_malloc_r+0x64>
 8002530:	460c      	mov	r4, r1
 8002532:	6849      	ldr	r1, [r1, #4]
 8002534:	e7cc      	b.n	80024d0 <_malloc_r+0x2c>
 8002536:	1cc4      	adds	r4, r0, #3
 8002538:	f024 0403 	bic.w	r4, r4, #3
 800253c:	42a0      	cmp	r0, r4
 800253e:	d005      	beq.n	800254c <_malloc_r+0xa8>
 8002540:	1a21      	subs	r1, r4, r0
 8002542:	4630      	mov	r0, r6
 8002544:	f000 f88c 	bl	8002660 <_sbrk_r>
 8002548:	3001      	adds	r0, #1
 800254a:	d0cf      	beq.n	80024ec <_malloc_r+0x48>
 800254c:	6025      	str	r5, [r4, #0]
 800254e:	e7db      	b.n	8002508 <_malloc_r+0x64>
 8002550:	20000084 	.word	0x20000084
 8002554:	20000088 	.word	0x20000088

08002558 <iprintf>:
 8002558:	b40f      	push	{r0, r1, r2, r3}
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <iprintf+0x2c>)
 800255c:	b513      	push	{r0, r1, r4, lr}
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	b124      	cbz	r4, 800256c <iprintf+0x14>
 8002562:	69a3      	ldr	r3, [r4, #24]
 8002564:	b913      	cbnz	r3, 800256c <iprintf+0x14>
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff fdec 	bl	8002144 <__sinit>
 800256c:	ab05      	add	r3, sp, #20
 800256e:	9a04      	ldr	r2, [sp, #16]
 8002570:	68a1      	ldr	r1, [r4, #8]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	4620      	mov	r0, r4
 8002576:	f000 fa53 	bl	8002a20 <_vfiprintf_r>
 800257a:	b002      	add	sp, #8
 800257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr
 8002584:	20000004 	.word	0x20000004

08002588 <putchar>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <putchar+0x24>)
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	4605      	mov	r5, r0
 8002590:	b124      	cbz	r4, 800259c <putchar+0x14>
 8002592:	69a3      	ldr	r3, [r4, #24]
 8002594:	b913      	cbnz	r3, 800259c <putchar+0x14>
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff fdd4 	bl	8002144 <__sinit>
 800259c:	68a2      	ldr	r2, [r4, #8]
 800259e:	4629      	mov	r1, r5
 80025a0:	4620      	mov	r0, r4
 80025a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025a6:	f000 bcd9 	b.w	8002f5c <_putc_r>
 80025aa:	bf00      	nop
 80025ac:	20000004 	.word	0x20000004

080025b0 <srand>:
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <srand+0x38>)
 80025b4:	681c      	ldr	r4, [r3, #0]
 80025b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025b8:	4605      	mov	r5, r0
 80025ba:	b97b      	cbnz	r3, 80025dc <srand+0x2c>
 80025bc:	2018      	movs	r0, #24
 80025be:	f000 f9fb 	bl	80029b8 <malloc>
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <srand+0x3c>)
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <srand+0x40>)
 80025c6:	63a0      	str	r0, [r4, #56]	; 0x38
 80025c8:	e9c0 2300 	strd	r2, r3, [r0]
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <srand+0x44>)
 80025ce:	6083      	str	r3, [r0, #8]
 80025d0:	230b      	movs	r3, #11
 80025d2:	8183      	strh	r3, [r0, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2300      	movs	r3, #0
 80025d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80025dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025de:	2200      	movs	r2, #0
 80025e0:	611d      	str	r5, [r3, #16]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	bd38      	pop	{r3, r4, r5, pc}
 80025e6:	bf00      	nop
 80025e8:	20000004 	.word	0x20000004
 80025ec:	abcd330e 	.word	0xabcd330e
 80025f0:	e66d1234 	.word	0xe66d1234
 80025f4:	0005deec 	.word	0x0005deec

080025f8 <rand>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <rand+0x50>)
 80025fc:	681c      	ldr	r4, [r3, #0]
 80025fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002600:	b97b      	cbnz	r3, 8002622 <rand+0x2a>
 8002602:	2018      	movs	r0, #24
 8002604:	f000 f9d8 	bl	80029b8 <malloc>
 8002608:	4a10      	ldr	r2, [pc, #64]	; (800264c <rand+0x54>)
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <rand+0x58>)
 800260c:	63a0      	str	r0, [r4, #56]	; 0x38
 800260e:	e9c0 2300 	strd	r2, r3, [r0]
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <rand+0x5c>)
 8002614:	6083      	str	r3, [r0, #8]
 8002616:	230b      	movs	r3, #11
 8002618:	8183      	strh	r3, [r0, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	2300      	movs	r3, #0
 800261e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002624:	480c      	ldr	r0, [pc, #48]	; (8002658 <rand+0x60>)
 8002626:	690a      	ldr	r2, [r1, #16]
 8002628:	694b      	ldr	r3, [r1, #20]
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <rand+0x64>)
 800262c:	4350      	muls	r0, r2
 800262e:	fb04 0003 	mla	r0, r4, r3, r0
 8002632:	fba2 2304 	umull	r2, r3, r2, r4
 8002636:	4403      	add	r3, r0
 8002638:	1c54      	adds	r4, r2, #1
 800263a:	f143 0500 	adc.w	r5, r3, #0
 800263e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002642:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	20000004 	.word	0x20000004
 800264c:	abcd330e 	.word	0xabcd330e
 8002650:	e66d1234 	.word	0xe66d1234
 8002654:	0005deec 	.word	0x0005deec
 8002658:	5851f42d 	.word	0x5851f42d
 800265c:	4c957f2d 	.word	0x4c957f2d

08002660 <_sbrk_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	4c06      	ldr	r4, [pc, #24]	; (800267c <_sbrk_r+0x1c>)
 8002664:	2300      	movs	r3, #0
 8002666:	4605      	mov	r5, r0
 8002668:	4608      	mov	r0, r1
 800266a:	6023      	str	r3, [r4, #0]
 800266c:	f000 fd00 	bl	8003070 <_sbrk>
 8002670:	1c43      	adds	r3, r0, #1
 8002672:	d102      	bne.n	800267a <_sbrk_r+0x1a>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	b103      	cbz	r3, 800267a <_sbrk_r+0x1a>
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	bd38      	pop	{r3, r4, r5, pc}
 800267c:	20000104 	.word	0x20000104

08002680 <__sread>:
 8002680:	b510      	push	{r4, lr}
 8002682:	460c      	mov	r4, r1
 8002684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002688:	f000 fc9e 	bl	8002fc8 <_read_r>
 800268c:	2800      	cmp	r0, #0
 800268e:	bfab      	itete	ge
 8002690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002692:	89a3      	ldrhlt	r3, [r4, #12]
 8002694:	181b      	addge	r3, r3, r0
 8002696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800269a:	bfac      	ite	ge
 800269c:	6563      	strge	r3, [r4, #84]	; 0x54
 800269e:	81a3      	strhlt	r3, [r4, #12]
 80026a0:	bd10      	pop	{r4, pc}

080026a2 <__swrite>:
 80026a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	461f      	mov	r7, r3
 80026a8:	898b      	ldrh	r3, [r1, #12]
 80026aa:	05db      	lsls	r3, r3, #23
 80026ac:	4605      	mov	r5, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	4616      	mov	r6, r2
 80026b2:	d505      	bpl.n	80026c0 <__swrite+0x1e>
 80026b4:	2302      	movs	r3, #2
 80026b6:	2200      	movs	r2, #0
 80026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026bc:	f000 f906 	bl	80028cc <_lseek_r>
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ca:	81a3      	strh	r3, [r4, #12]
 80026cc:	4632      	mov	r2, r6
 80026ce:	463b      	mov	r3, r7
 80026d0:	4628      	mov	r0, r5
 80026d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026d6:	f000 b869 	b.w	80027ac <_write_r>

080026da <__sseek>:
 80026da:	b510      	push	{r4, lr}
 80026dc:	460c      	mov	r4, r1
 80026de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e2:	f000 f8f3 	bl	80028cc <_lseek_r>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	bf15      	itete	ne
 80026ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80026ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026f6:	81a3      	strheq	r3, [r4, #12]
 80026f8:	bf18      	it	ne
 80026fa:	81a3      	strhne	r3, [r4, #12]
 80026fc:	bd10      	pop	{r4, pc}

080026fe <__sclose>:
 80026fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002702:	f000 b8d3 	b.w	80028ac <_close_r>
	...

08002708 <__swbuf_r>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	460e      	mov	r6, r1
 800270c:	4614      	mov	r4, r2
 800270e:	4605      	mov	r5, r0
 8002710:	b118      	cbz	r0, 800271a <__swbuf_r+0x12>
 8002712:	6983      	ldr	r3, [r0, #24]
 8002714:	b90b      	cbnz	r3, 800271a <__swbuf_r+0x12>
 8002716:	f7ff fd15 	bl	8002144 <__sinit>
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <__swbuf_r+0x98>)
 800271c:	429c      	cmp	r4, r3
 800271e:	d12a      	bne.n	8002776 <__swbuf_r+0x6e>
 8002720:	686c      	ldr	r4, [r5, #4]
 8002722:	69a3      	ldr	r3, [r4, #24]
 8002724:	60a3      	str	r3, [r4, #8]
 8002726:	89a3      	ldrh	r3, [r4, #12]
 8002728:	071a      	lsls	r2, r3, #28
 800272a:	d52e      	bpl.n	800278a <__swbuf_r+0x82>
 800272c:	6923      	ldr	r3, [r4, #16]
 800272e:	b363      	cbz	r3, 800278a <__swbuf_r+0x82>
 8002730:	6923      	ldr	r3, [r4, #16]
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	1ac0      	subs	r0, r0, r3
 8002736:	6963      	ldr	r3, [r4, #20]
 8002738:	b2f6      	uxtb	r6, r6
 800273a:	4283      	cmp	r3, r0
 800273c:	4637      	mov	r7, r6
 800273e:	dc04      	bgt.n	800274a <__swbuf_r+0x42>
 8002740:	4621      	mov	r1, r4
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff fc82 	bl	800204c <_fflush_r>
 8002748:	bb28      	cbnz	r0, 8002796 <__swbuf_r+0x8e>
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60a3      	str	r3, [r4, #8]
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	6022      	str	r2, [r4, #0]
 8002756:	701e      	strb	r6, [r3, #0]
 8002758:	6963      	ldr	r3, [r4, #20]
 800275a:	3001      	adds	r0, #1
 800275c:	4283      	cmp	r3, r0
 800275e:	d004      	beq.n	800276a <__swbuf_r+0x62>
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	07db      	lsls	r3, r3, #31
 8002764:	d519      	bpl.n	800279a <__swbuf_r+0x92>
 8002766:	2e0a      	cmp	r6, #10
 8002768:	d117      	bne.n	800279a <__swbuf_r+0x92>
 800276a:	4621      	mov	r1, r4
 800276c:	4628      	mov	r0, r5
 800276e:	f7ff fc6d 	bl	800204c <_fflush_r>
 8002772:	b190      	cbz	r0, 800279a <__swbuf_r+0x92>
 8002774:	e00f      	b.n	8002796 <__swbuf_r+0x8e>
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <__swbuf_r+0x9c>)
 8002778:	429c      	cmp	r4, r3
 800277a:	d101      	bne.n	8002780 <__swbuf_r+0x78>
 800277c:	68ac      	ldr	r4, [r5, #8]
 800277e:	e7d0      	b.n	8002722 <__swbuf_r+0x1a>
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <__swbuf_r+0xa0>)
 8002782:	429c      	cmp	r4, r3
 8002784:	bf08      	it	eq
 8002786:	68ec      	ldreq	r4, [r5, #12]
 8002788:	e7cb      	b.n	8002722 <__swbuf_r+0x1a>
 800278a:	4621      	mov	r1, r4
 800278c:	4628      	mov	r0, r5
 800278e:	f000 f81f 	bl	80027d0 <__swsetup_r>
 8002792:	2800      	cmp	r0, #0
 8002794:	d0cc      	beq.n	8002730 <__swbuf_r+0x28>
 8002796:	f04f 37ff 	mov.w	r7, #4294967295
 800279a:	4638      	mov	r0, r7
 800279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279e:	bf00      	nop
 80027a0:	08003204 	.word	0x08003204
 80027a4:	08003224 	.word	0x08003224
 80027a8:	080031e4 	.word	0x080031e4

080027ac <_write_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	4c07      	ldr	r4, [pc, #28]	; (80027cc <_write_r+0x20>)
 80027b0:	4605      	mov	r5, r0
 80027b2:	4608      	mov	r0, r1
 80027b4:	4611      	mov	r1, r2
 80027b6:	2200      	movs	r2, #0
 80027b8:	6022      	str	r2, [r4, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f7fe fa4e 	bl	8000c5c <_write>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d102      	bne.n	80027ca <_write_r+0x1e>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	b103      	cbz	r3, 80027ca <_write_r+0x1e>
 80027c8:	602b      	str	r3, [r5, #0]
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	20000104 	.word	0x20000104

080027d0 <__swsetup_r>:
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <__swsetup_r+0xcc>)
 80027d2:	b570      	push	{r4, r5, r6, lr}
 80027d4:	681d      	ldr	r5, [r3, #0]
 80027d6:	4606      	mov	r6, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	b125      	cbz	r5, 80027e6 <__swsetup_r+0x16>
 80027dc:	69ab      	ldr	r3, [r5, #24]
 80027de:	b913      	cbnz	r3, 80027e6 <__swsetup_r+0x16>
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7ff fcaf 	bl	8002144 <__sinit>
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <__swsetup_r+0xd0>)
 80027e8:	429c      	cmp	r4, r3
 80027ea:	d10f      	bne.n	800280c <__swsetup_r+0x3c>
 80027ec:	686c      	ldr	r4, [r5, #4]
 80027ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	0715      	lsls	r5, r2, #28
 80027f6:	d42c      	bmi.n	8002852 <__swsetup_r+0x82>
 80027f8:	06d0      	lsls	r0, r2, #27
 80027fa:	d411      	bmi.n	8002820 <__swsetup_r+0x50>
 80027fc:	2209      	movs	r2, #9
 80027fe:	6032      	str	r2, [r6, #0]
 8002800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	f04f 30ff 	mov.w	r0, #4294967295
 800280a:	e03e      	b.n	800288a <__swsetup_r+0xba>
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <__swsetup_r+0xd4>)
 800280e:	429c      	cmp	r4, r3
 8002810:	d101      	bne.n	8002816 <__swsetup_r+0x46>
 8002812:	68ac      	ldr	r4, [r5, #8]
 8002814:	e7eb      	b.n	80027ee <__swsetup_r+0x1e>
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <__swsetup_r+0xd8>)
 8002818:	429c      	cmp	r4, r3
 800281a:	bf08      	it	eq
 800281c:	68ec      	ldreq	r4, [r5, #12]
 800281e:	e7e6      	b.n	80027ee <__swsetup_r+0x1e>
 8002820:	0751      	lsls	r1, r2, #29
 8002822:	d512      	bpl.n	800284a <__swsetup_r+0x7a>
 8002824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002826:	b141      	cbz	r1, 800283a <__swsetup_r+0x6a>
 8002828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800282c:	4299      	cmp	r1, r3
 800282e:	d002      	beq.n	8002836 <__swsetup_r+0x66>
 8002830:	4630      	mov	r0, r6
 8002832:	f7ff fde9 	bl	8002408 <_free_r>
 8002836:	2300      	movs	r3, #0
 8002838:	6363      	str	r3, [r4, #52]	; 0x34
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002840:	81a3      	strh	r3, [r4, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	6063      	str	r3, [r4, #4]
 8002846:	6923      	ldr	r3, [r4, #16]
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	81a3      	strh	r3, [r4, #12]
 8002852:	6923      	ldr	r3, [r4, #16]
 8002854:	b94b      	cbnz	r3, 800286a <__swsetup_r+0x9a>
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d003      	beq.n	800286a <__swsetup_r+0x9a>
 8002862:	4621      	mov	r1, r4
 8002864:	4630      	mov	r0, r6
 8002866:	f000 f867 	bl	8002938 <__smakebuf_r>
 800286a:	89a2      	ldrh	r2, [r4, #12]
 800286c:	f012 0301 	ands.w	r3, r2, #1
 8002870:	d00c      	beq.n	800288c <__swsetup_r+0xbc>
 8002872:	2300      	movs	r3, #0
 8002874:	60a3      	str	r3, [r4, #8]
 8002876:	6963      	ldr	r3, [r4, #20]
 8002878:	425b      	negs	r3, r3
 800287a:	61a3      	str	r3, [r4, #24]
 800287c:	6923      	ldr	r3, [r4, #16]
 800287e:	b953      	cbnz	r3, 8002896 <__swsetup_r+0xc6>
 8002880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002884:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002888:	d1ba      	bne.n	8002800 <__swsetup_r+0x30>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	0792      	lsls	r2, r2, #30
 800288e:	bf58      	it	pl
 8002890:	6963      	ldrpl	r3, [r4, #20]
 8002892:	60a3      	str	r3, [r4, #8]
 8002894:	e7f2      	b.n	800287c <__swsetup_r+0xac>
 8002896:	2000      	movs	r0, #0
 8002898:	e7f7      	b.n	800288a <__swsetup_r+0xba>
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004
 80028a0:	08003204 	.word	0x08003204
 80028a4:	08003224 	.word	0x08003224
 80028a8:	080031e4 	.word	0x080031e4

080028ac <_close_r>:
 80028ac:	b538      	push	{r3, r4, r5, lr}
 80028ae:	4c06      	ldr	r4, [pc, #24]	; (80028c8 <_close_r+0x1c>)
 80028b0:	2300      	movs	r3, #0
 80028b2:	4605      	mov	r5, r0
 80028b4:	4608      	mov	r0, r1
 80028b6:	6023      	str	r3, [r4, #0]
 80028b8:	f000 fbba 	bl	8003030 <_close>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	d102      	bne.n	80028c6 <_close_r+0x1a>
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	b103      	cbz	r3, 80028c6 <_close_r+0x1a>
 80028c4:	602b      	str	r3, [r5, #0]
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
 80028c8:	20000104 	.word	0x20000104

080028cc <_lseek_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4c07      	ldr	r4, [pc, #28]	; (80028ec <_lseek_r+0x20>)
 80028d0:	4605      	mov	r5, r0
 80028d2:	4608      	mov	r0, r1
 80028d4:	4611      	mov	r1, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	6022      	str	r2, [r4, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 fbc0 	bl	8003060 <_lseek>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_lseek_r+0x1e>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_lseek_r+0x1e>
 80028e8:	602b      	str	r3, [r5, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	20000104 	.word	0x20000104

080028f0 <__swhatbuf_r>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	460e      	mov	r6, r1
 80028f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f8:	2900      	cmp	r1, #0
 80028fa:	b096      	sub	sp, #88	; 0x58
 80028fc:	4614      	mov	r4, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	da07      	bge.n	8002912 <__swhatbuf_r+0x22>
 8002902:	2300      	movs	r3, #0
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	89b3      	ldrh	r3, [r6, #12]
 8002908:	061a      	lsls	r2, r3, #24
 800290a:	d410      	bmi.n	800292e <__swhatbuf_r+0x3e>
 800290c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002910:	e00e      	b.n	8002930 <__swhatbuf_r+0x40>
 8002912:	466a      	mov	r2, sp
 8002914:	f000 fb6a 	bl	8002fec <_fstat_r>
 8002918:	2800      	cmp	r0, #0
 800291a:	dbf2      	blt.n	8002902 <__swhatbuf_r+0x12>
 800291c:	9a01      	ldr	r2, [sp, #4]
 800291e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002926:	425a      	negs	r2, r3
 8002928:	415a      	adcs	r2, r3
 800292a:	602a      	str	r2, [r5, #0]
 800292c:	e7ee      	b.n	800290c <__swhatbuf_r+0x1c>
 800292e:	2340      	movs	r3, #64	; 0x40
 8002930:	2000      	movs	r0, #0
 8002932:	6023      	str	r3, [r4, #0]
 8002934:	b016      	add	sp, #88	; 0x58
 8002936:	bd70      	pop	{r4, r5, r6, pc}

08002938 <__smakebuf_r>:
 8002938:	898b      	ldrh	r3, [r1, #12]
 800293a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800293c:	079d      	lsls	r5, r3, #30
 800293e:	4606      	mov	r6, r0
 8002940:	460c      	mov	r4, r1
 8002942:	d507      	bpl.n	8002954 <__smakebuf_r+0x1c>
 8002944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	6123      	str	r3, [r4, #16]
 800294c:	2301      	movs	r3, #1
 800294e:	6163      	str	r3, [r4, #20]
 8002950:	b002      	add	sp, #8
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	ab01      	add	r3, sp, #4
 8002956:	466a      	mov	r2, sp
 8002958:	f7ff ffca 	bl	80028f0 <__swhatbuf_r>
 800295c:	9900      	ldr	r1, [sp, #0]
 800295e:	4605      	mov	r5, r0
 8002960:	4630      	mov	r0, r6
 8002962:	f7ff fd9f 	bl	80024a4 <_malloc_r>
 8002966:	b948      	cbnz	r0, 800297c <__smakebuf_r+0x44>
 8002968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800296c:	059a      	lsls	r2, r3, #22
 800296e:	d4ef      	bmi.n	8002950 <__smakebuf_r+0x18>
 8002970:	f023 0303 	bic.w	r3, r3, #3
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	81a3      	strh	r3, [r4, #12]
 800297a:	e7e3      	b.n	8002944 <__smakebuf_r+0xc>
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <__smakebuf_r+0x7c>)
 800297e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	6020      	str	r0, [r4, #0]
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	81a3      	strh	r3, [r4, #12]
 800298a:	9b00      	ldr	r3, [sp, #0]
 800298c:	6163      	str	r3, [r4, #20]
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	6120      	str	r0, [r4, #16]
 8002992:	b15b      	cbz	r3, 80029ac <__smakebuf_r+0x74>
 8002994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002998:	4630      	mov	r0, r6
 800299a:	f000 fb39 	bl	8003010 <_isatty_r>
 800299e:	b128      	cbz	r0, 80029ac <__smakebuf_r+0x74>
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	81a3      	strh	r3, [r4, #12]
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	431d      	orrs	r5, r3
 80029b0:	81a5      	strh	r5, [r4, #12]
 80029b2:	e7cd      	b.n	8002950 <__smakebuf_r+0x18>
 80029b4:	0800210d 	.word	0x0800210d

080029b8 <malloc>:
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <malloc+0xc>)
 80029ba:	4601      	mov	r1, r0
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f7ff bd71 	b.w	80024a4 <_malloc_r>
 80029c2:	bf00      	nop
 80029c4:	20000004 	.word	0x20000004

080029c8 <__malloc_lock>:
 80029c8:	4770      	bx	lr

080029ca <__malloc_unlock>:
 80029ca:	4770      	bx	lr

080029cc <__sfputc_r>:
 80029cc:	6893      	ldr	r3, [r2, #8]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	b410      	push	{r4}
 80029d4:	6093      	str	r3, [r2, #8]
 80029d6:	da08      	bge.n	80029ea <__sfputc_r+0x1e>
 80029d8:	6994      	ldr	r4, [r2, #24]
 80029da:	42a3      	cmp	r3, r4
 80029dc:	db01      	blt.n	80029e2 <__sfputc_r+0x16>
 80029de:	290a      	cmp	r1, #10
 80029e0:	d103      	bne.n	80029ea <__sfputc_r+0x1e>
 80029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e6:	f7ff be8f 	b.w	8002708 <__swbuf_r>
 80029ea:	6813      	ldr	r3, [r2, #0]
 80029ec:	1c58      	adds	r0, r3, #1
 80029ee:	6010      	str	r0, [r2, #0]
 80029f0:	7019      	strb	r1, [r3, #0]
 80029f2:	4608      	mov	r0, r1
 80029f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <__sfputs_r>:
 80029fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fc:	4606      	mov	r6, r0
 80029fe:	460f      	mov	r7, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	18d5      	adds	r5, r2, r3
 8002a04:	42ac      	cmp	r4, r5
 8002a06:	d101      	bne.n	8002a0c <__sfputs_r+0x12>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e007      	b.n	8002a1c <__sfputs_r+0x22>
 8002a0c:	463a      	mov	r2, r7
 8002a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a12:	4630      	mov	r0, r6
 8002a14:	f7ff ffda 	bl	80029cc <__sfputc_r>
 8002a18:	1c43      	adds	r3, r0, #1
 8002a1a:	d1f3      	bne.n	8002a04 <__sfputs_r+0xa>
 8002a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a20 <_vfiprintf_r>:
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	460c      	mov	r4, r1
 8002a26:	b09d      	sub	sp, #116	; 0x74
 8002a28:	4617      	mov	r7, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4606      	mov	r6, r0
 8002a2e:	b118      	cbz	r0, 8002a38 <_vfiprintf_r+0x18>
 8002a30:	6983      	ldr	r3, [r0, #24]
 8002a32:	b90b      	cbnz	r3, 8002a38 <_vfiprintf_r+0x18>
 8002a34:	f7ff fb86 	bl	8002144 <__sinit>
 8002a38:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <_vfiprintf_r+0x20c>)
 8002a3a:	429c      	cmp	r4, r3
 8002a3c:	d158      	bne.n	8002af0 <_vfiprintf_r+0xd0>
 8002a3e:	6874      	ldr	r4, [r6, #4]
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	0718      	lsls	r0, r3, #28
 8002a44:	d55e      	bpl.n	8002b04 <_vfiprintf_r+0xe4>
 8002a46:	6923      	ldr	r3, [r4, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d05b      	beq.n	8002b04 <_vfiprintf_r+0xe4>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a50:	2320      	movs	r3, #32
 8002a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a56:	2330      	movs	r3, #48	; 0x30
 8002a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a5c:	9503      	str	r5, [sp, #12]
 8002a5e:	f04f 0b01 	mov.w	fp, #1
 8002a62:	46b8      	mov	r8, r7
 8002a64:	4645      	mov	r5, r8
 8002a66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a6a:	b10b      	cbz	r3, 8002a70 <_vfiprintf_r+0x50>
 8002a6c:	2b25      	cmp	r3, #37	; 0x25
 8002a6e:	d154      	bne.n	8002b1a <_vfiprintf_r+0xfa>
 8002a70:	ebb8 0a07 	subs.w	sl, r8, r7
 8002a74:	d00b      	beq.n	8002a8e <_vfiprintf_r+0x6e>
 8002a76:	4653      	mov	r3, sl
 8002a78:	463a      	mov	r2, r7
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f7ff ffbc 	bl	80029fa <__sfputs_r>
 8002a82:	3001      	adds	r0, #1
 8002a84:	f000 80c2 	beq.w	8002c0c <_vfiprintf_r+0x1ec>
 8002a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a8a:	4453      	add	r3, sl
 8002a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8e:	f898 3000 	ldrb.w	r3, [r8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80ba 	beq.w	8002c0c <_vfiprintf_r+0x1ec>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa2:	9304      	str	r3, [sp, #16]
 8002aa4:	9307      	str	r3, [sp, #28]
 8002aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8002aac:	46a8      	mov	r8, r5
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002ab4:	485e      	ldr	r0, [pc, #376]	; (8002c30 <_vfiprintf_r+0x210>)
 8002ab6:	f7fd fbcb 	bl	8000250 <memchr>
 8002aba:	9b04      	ldr	r3, [sp, #16]
 8002abc:	bb78      	cbnz	r0, 8002b1e <_vfiprintf_r+0xfe>
 8002abe:	06d9      	lsls	r1, r3, #27
 8002ac0:	bf44      	itt	mi
 8002ac2:	2220      	movmi	r2, #32
 8002ac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ac8:	071a      	lsls	r2, r3, #28
 8002aca:	bf44      	itt	mi
 8002acc:	222b      	movmi	r2, #43	; 0x2b
 8002ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ad2:	782a      	ldrb	r2, [r5, #0]
 8002ad4:	2a2a      	cmp	r2, #42	; 0x2a
 8002ad6:	d02a      	beq.n	8002b2e <_vfiprintf_r+0x10e>
 8002ad8:	9a07      	ldr	r2, [sp, #28]
 8002ada:	46a8      	mov	r8, r5
 8002adc:	2000      	movs	r0, #0
 8002ade:	250a      	movs	r5, #10
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae6:	3b30      	subs	r3, #48	; 0x30
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d969      	bls.n	8002bc0 <_vfiprintf_r+0x1a0>
 8002aec:	b360      	cbz	r0, 8002b48 <_vfiprintf_r+0x128>
 8002aee:	e024      	b.n	8002b3a <_vfiprintf_r+0x11a>
 8002af0:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <_vfiprintf_r+0x214>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d101      	bne.n	8002afa <_vfiprintf_r+0xda>
 8002af6:	68b4      	ldr	r4, [r6, #8]
 8002af8:	e7a2      	b.n	8002a40 <_vfiprintf_r+0x20>
 8002afa:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <_vfiprintf_r+0x218>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	bf08      	it	eq
 8002b00:	68f4      	ldreq	r4, [r6, #12]
 8002b02:	e79d      	b.n	8002a40 <_vfiprintf_r+0x20>
 8002b04:	4621      	mov	r1, r4
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7ff fe62 	bl	80027d0 <__swsetup_r>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d09d      	beq.n	8002a4c <_vfiprintf_r+0x2c>
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	b01d      	add	sp, #116	; 0x74
 8002b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1a:	46a8      	mov	r8, r5
 8002b1c:	e7a2      	b.n	8002a64 <_vfiprintf_r+0x44>
 8002b1e:	4a44      	ldr	r2, [pc, #272]	; (8002c30 <_vfiprintf_r+0x210>)
 8002b20:	1a80      	subs	r0, r0, r2
 8002b22:	fa0b f000 	lsl.w	r0, fp, r0
 8002b26:	4318      	orrs	r0, r3
 8002b28:	9004      	str	r0, [sp, #16]
 8002b2a:	4645      	mov	r5, r8
 8002b2c:	e7be      	b.n	8002aac <_vfiprintf_r+0x8c>
 8002b2e:	9a03      	ldr	r2, [sp, #12]
 8002b30:	1d11      	adds	r1, r2, #4
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	9103      	str	r1, [sp, #12]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	db01      	blt.n	8002b3e <_vfiprintf_r+0x11e>
 8002b3a:	9207      	str	r2, [sp, #28]
 8002b3c:	e004      	b.n	8002b48 <_vfiprintf_r+0x128>
 8002b3e:	4252      	negs	r2, r2
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	9207      	str	r2, [sp, #28]
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	f898 3000 	ldrb.w	r3, [r8]
 8002b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b4e:	d10e      	bne.n	8002b6e <_vfiprintf_r+0x14e>
 8002b50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002b54:	2b2a      	cmp	r3, #42	; 0x2a
 8002b56:	d138      	bne.n	8002bca <_vfiprintf_r+0x1aa>
 8002b58:	9b03      	ldr	r3, [sp, #12]
 8002b5a:	1d1a      	adds	r2, r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b68:	f108 0802 	add.w	r8, r8, #2
 8002b6c:	9305      	str	r3, [sp, #20]
 8002b6e:	4d33      	ldr	r5, [pc, #204]	; (8002c3c <_vfiprintf_r+0x21c>)
 8002b70:	f898 1000 	ldrb.w	r1, [r8]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4628      	mov	r0, r5
 8002b78:	f7fd fb6a 	bl	8000250 <memchr>
 8002b7c:	b140      	cbz	r0, 8002b90 <_vfiprintf_r+0x170>
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	1b40      	subs	r0, r0, r5
 8002b82:	fa03 f000 	lsl.w	r0, r3, r0
 8002b86:	9b04      	ldr	r3, [sp, #16]
 8002b88:	4303      	orrs	r3, r0
 8002b8a:	f108 0801 	add.w	r8, r8, #1
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	f898 1000 	ldrb.w	r1, [r8]
 8002b94:	482a      	ldr	r0, [pc, #168]	; (8002c40 <_vfiprintf_r+0x220>)
 8002b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	f108 0701 	add.w	r7, r8, #1
 8002ba0:	f7fd fb56 	bl	8000250 <memchr>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d037      	beq.n	8002c18 <_vfiprintf_r+0x1f8>
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <_vfiprintf_r+0x224>)
 8002baa:	bb1b      	cbnz	r3, 8002bf4 <_vfiprintf_r+0x1d4>
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	3307      	adds	r3, #7
 8002bb0:	f023 0307 	bic.w	r3, r3, #7
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bba:	444b      	add	r3, r9
 8002bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbe:	e750      	b.n	8002a62 <_vfiprintf_r+0x42>
 8002bc0:	fb05 3202 	mla	r2, r5, r2, r3
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	4688      	mov	r8, r1
 8002bc8:	e78a      	b.n	8002ae0 <_vfiprintf_r+0xc0>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f108 0801 	add.w	r8, r8, #1
 8002bd0:	9305      	str	r3, [sp, #20]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	250a      	movs	r5, #10
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bdc:	3a30      	subs	r2, #48	; 0x30
 8002bde:	2a09      	cmp	r2, #9
 8002be0:	d903      	bls.n	8002bea <_vfiprintf_r+0x1ca>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0c3      	beq.n	8002b6e <_vfiprintf_r+0x14e>
 8002be6:	9105      	str	r1, [sp, #20]
 8002be8:	e7c1      	b.n	8002b6e <_vfiprintf_r+0x14e>
 8002bea:	fb05 2101 	mla	r1, r5, r1, r2
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4680      	mov	r8, r0
 8002bf2:	e7f0      	b.n	8002bd6 <_vfiprintf_r+0x1b6>
 8002bf4:	ab03      	add	r3, sp, #12
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <_vfiprintf_r+0x228>)
 8002bfc:	a904      	add	r1, sp, #16
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f3af 8000 	nop.w
 8002c04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c08:	4681      	mov	r9, r0
 8002c0a:	d1d5      	bne.n	8002bb8 <_vfiprintf_r+0x198>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	065b      	lsls	r3, r3, #25
 8002c10:	f53f af7e 	bmi.w	8002b10 <_vfiprintf_r+0xf0>
 8002c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c16:	e77d      	b.n	8002b14 <_vfiprintf_r+0xf4>
 8002c18:	ab03      	add	r3, sp, #12
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <_vfiprintf_r+0x228>)
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f888 	bl	8002d38 <_printf_i>
 8002c28:	e7ec      	b.n	8002c04 <_vfiprintf_r+0x1e4>
 8002c2a:	bf00      	nop
 8002c2c:	08003204 	.word	0x08003204
 8002c30:	08003248 	.word	0x08003248
 8002c34:	08003224 	.word	0x08003224
 8002c38:	080031e4 	.word	0x080031e4
 8002c3c:	0800324e 	.word	0x0800324e
 8002c40:	08003252 	.word	0x08003252
 8002c44:	00000000 	.word	0x00000000
 8002c48:	080029fb 	.word	0x080029fb

08002c4c <_printf_common>:
 8002c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c50:	4691      	mov	r9, r2
 8002c52:	461f      	mov	r7, r3
 8002c54:	688a      	ldr	r2, [r1, #8]
 8002c56:	690b      	ldr	r3, [r1, #16]
 8002c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bfb8      	it	lt
 8002c60:	4613      	movlt	r3, r2
 8002c62:	f8c9 3000 	str.w	r3, [r9]
 8002c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	b112      	cbz	r2, 8002c76 <_printf_common+0x2a>
 8002c70:	3301      	adds	r3, #1
 8002c72:	f8c9 3000 	str.w	r3, [r9]
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	0699      	lsls	r1, r3, #26
 8002c7a:	bf42      	ittt	mi
 8002c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c80:	3302      	addmi	r3, #2
 8002c82:	f8c9 3000 	strmi.w	r3, [r9]
 8002c86:	6825      	ldr	r5, [r4, #0]
 8002c88:	f015 0506 	ands.w	r5, r5, #6
 8002c8c:	d107      	bne.n	8002c9e <_printf_common+0x52>
 8002c8e:	f104 0a19 	add.w	sl, r4, #25
 8002c92:	68e3      	ldr	r3, [r4, #12]
 8002c94:	f8d9 2000 	ldr.w	r2, [r9]
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	42ab      	cmp	r3, r5
 8002c9c:	dc28      	bgt.n	8002cf0 <_printf_common+0xa4>
 8002c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	3300      	adds	r3, #0
 8002ca6:	bf18      	it	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	0692      	lsls	r2, r2, #26
 8002cac:	d42d      	bmi.n	8002d0a <_printf_common+0xbe>
 8002cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cb2:	4639      	mov	r1, r7
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	47c0      	blx	r8
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d020      	beq.n	8002cfe <_printf_common+0xb2>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	68e5      	ldr	r5, [r4, #12]
 8002cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8002cc4:	f003 0306 	and.w	r3, r3, #6
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	bf08      	it	eq
 8002ccc:	1aad      	subeq	r5, r5, r2
 8002cce:	68a3      	ldr	r3, [r4, #8]
 8002cd0:	6922      	ldr	r2, [r4, #16]
 8002cd2:	bf0c      	ite	eq
 8002cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd8:	2500      	movne	r5, #0
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	bfc4      	itt	gt
 8002cde:	1a9b      	subgt	r3, r3, r2
 8002ce0:	18ed      	addgt	r5, r5, r3
 8002ce2:	f04f 0900 	mov.w	r9, #0
 8002ce6:	341a      	adds	r4, #26
 8002ce8:	454d      	cmp	r5, r9
 8002cea:	d11a      	bne.n	8002d22 <_printf_common+0xd6>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e008      	b.n	8002d02 <_printf_common+0xb6>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	47c0      	blx	r8
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d103      	bne.n	8002d06 <_printf_common+0xba>
 8002cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d06:	3501      	adds	r5, #1
 8002d08:	e7c3      	b.n	8002c92 <_printf_common+0x46>
 8002d0a:	18e1      	adds	r1, r4, r3
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	2030      	movs	r0, #48	; 0x30
 8002d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d14:	4422      	add	r2, r4
 8002d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d1e:	3302      	adds	r3, #2
 8002d20:	e7c5      	b.n	8002cae <_printf_common+0x62>
 8002d22:	2301      	movs	r3, #1
 8002d24:	4622      	mov	r2, r4
 8002d26:	4639      	mov	r1, r7
 8002d28:	4630      	mov	r0, r6
 8002d2a:	47c0      	blx	r8
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d0e6      	beq.n	8002cfe <_printf_common+0xb2>
 8002d30:	f109 0901 	add.w	r9, r9, #1
 8002d34:	e7d8      	b.n	8002ce8 <_printf_common+0x9c>
	...

08002d38 <_printf_i>:
 8002d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d40:	460c      	mov	r4, r1
 8002d42:	7e09      	ldrb	r1, [r1, #24]
 8002d44:	b085      	sub	sp, #20
 8002d46:	296e      	cmp	r1, #110	; 0x6e
 8002d48:	4617      	mov	r7, r2
 8002d4a:	4606      	mov	r6, r0
 8002d4c:	4698      	mov	r8, r3
 8002d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d50:	f000 80b3 	beq.w	8002eba <_printf_i+0x182>
 8002d54:	d822      	bhi.n	8002d9c <_printf_i+0x64>
 8002d56:	2963      	cmp	r1, #99	; 0x63
 8002d58:	d036      	beq.n	8002dc8 <_printf_i+0x90>
 8002d5a:	d80a      	bhi.n	8002d72 <_printf_i+0x3a>
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	f000 80b9 	beq.w	8002ed4 <_printf_i+0x19c>
 8002d62:	2958      	cmp	r1, #88	; 0x58
 8002d64:	f000 8083 	beq.w	8002e6e <_printf_i+0x136>
 8002d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d70:	e032      	b.n	8002dd8 <_printf_i+0xa0>
 8002d72:	2964      	cmp	r1, #100	; 0x64
 8002d74:	d001      	beq.n	8002d7a <_printf_i+0x42>
 8002d76:	2969      	cmp	r1, #105	; 0x69
 8002d78:	d1f6      	bne.n	8002d68 <_printf_i+0x30>
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	0605      	lsls	r5, r0, #24
 8002d80:	f103 0104 	add.w	r1, r3, #4
 8002d84:	d52a      	bpl.n	8002ddc <_printf_i+0xa4>
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6011      	str	r1, [r2, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da03      	bge.n	8002d96 <_printf_i+0x5e>
 8002d8e:	222d      	movs	r2, #45	; 0x2d
 8002d90:	425b      	negs	r3, r3
 8002d92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d96:	486f      	ldr	r0, [pc, #444]	; (8002f54 <_printf_i+0x21c>)
 8002d98:	220a      	movs	r2, #10
 8002d9a:	e039      	b.n	8002e10 <_printf_i+0xd8>
 8002d9c:	2973      	cmp	r1, #115	; 0x73
 8002d9e:	f000 809d 	beq.w	8002edc <_printf_i+0x1a4>
 8002da2:	d808      	bhi.n	8002db6 <_printf_i+0x7e>
 8002da4:	296f      	cmp	r1, #111	; 0x6f
 8002da6:	d020      	beq.n	8002dea <_printf_i+0xb2>
 8002da8:	2970      	cmp	r1, #112	; 0x70
 8002daa:	d1dd      	bne.n	8002d68 <_printf_i+0x30>
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	f043 0320 	orr.w	r3, r3, #32
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	e003      	b.n	8002dbe <_printf_i+0x86>
 8002db6:	2975      	cmp	r1, #117	; 0x75
 8002db8:	d017      	beq.n	8002dea <_printf_i+0xb2>
 8002dba:	2978      	cmp	r1, #120	; 0x78
 8002dbc:	d1d4      	bne.n	8002d68 <_printf_i+0x30>
 8002dbe:	2378      	movs	r3, #120	; 0x78
 8002dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dc4:	4864      	ldr	r0, [pc, #400]	; (8002f58 <_printf_i+0x220>)
 8002dc6:	e055      	b.n	8002e74 <_printf_i+0x13c>
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	1d19      	adds	r1, r3, #4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e08c      	b.n	8002ef6 <_printf_i+0x1be>
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6011      	str	r1, [r2, #0]
 8002de0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002de4:	bf18      	it	ne
 8002de6:	b21b      	sxthne	r3, r3
 8002de8:	e7cf      	b.n	8002d8a <_printf_i+0x52>
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	6825      	ldr	r5, [r4, #0]
 8002dee:	1d18      	adds	r0, r3, #4
 8002df0:	6010      	str	r0, [r2, #0]
 8002df2:	0628      	lsls	r0, r5, #24
 8002df4:	d501      	bpl.n	8002dfa <_printf_i+0xc2>
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e002      	b.n	8002e00 <_printf_i+0xc8>
 8002dfa:	0668      	lsls	r0, r5, #25
 8002dfc:	d5fb      	bpl.n	8002df6 <_printf_i+0xbe>
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	4854      	ldr	r0, [pc, #336]	; (8002f54 <_printf_i+0x21c>)
 8002e02:	296f      	cmp	r1, #111	; 0x6f
 8002e04:	bf14      	ite	ne
 8002e06:	220a      	movne	r2, #10
 8002e08:	2208      	moveq	r2, #8
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e10:	6865      	ldr	r5, [r4, #4]
 8002e12:	60a5      	str	r5, [r4, #8]
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	f2c0 8095 	blt.w	8002f44 <_printf_i+0x20c>
 8002e1a:	6821      	ldr	r1, [r4, #0]
 8002e1c:	f021 0104 	bic.w	r1, r1, #4
 8002e20:	6021      	str	r1, [r4, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d13d      	bne.n	8002ea2 <_printf_i+0x16a>
 8002e26:	2d00      	cmp	r5, #0
 8002e28:	f040 808e 	bne.w	8002f48 <_printf_i+0x210>
 8002e2c:	4665      	mov	r5, ip
 8002e2e:	2a08      	cmp	r2, #8
 8002e30:	d10b      	bne.n	8002e4a <_printf_i+0x112>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	07db      	lsls	r3, r3, #31
 8002e36:	d508      	bpl.n	8002e4a <_printf_i+0x112>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	6862      	ldr	r2, [r4, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	bfde      	ittt	le
 8002e40:	2330      	movle	r3, #48	; 0x30
 8002e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e4a:	ebac 0305 	sub.w	r3, ip, r5
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	f8cd 8000 	str.w	r8, [sp]
 8002e54:	463b      	mov	r3, r7
 8002e56:	aa03      	add	r2, sp, #12
 8002e58:	4621      	mov	r1, r4
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7ff fef6 	bl	8002c4c <_printf_common>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d14d      	bne.n	8002f00 <_printf_i+0x1c8>
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	b005      	add	sp, #20
 8002e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e6e:	4839      	ldr	r0, [pc, #228]	; (8002f54 <_printf_i+0x21c>)
 8002e70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	6821      	ldr	r1, [r4, #0]
 8002e78:	1d1d      	adds	r5, r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6015      	str	r5, [r2, #0]
 8002e7e:	060a      	lsls	r2, r1, #24
 8002e80:	d50b      	bpl.n	8002e9a <_printf_i+0x162>
 8002e82:	07ca      	lsls	r2, r1, #31
 8002e84:	bf44      	itt	mi
 8002e86:	f041 0120 	orrmi.w	r1, r1, #32
 8002e8a:	6021      	strmi	r1, [r4, #0]
 8002e8c:	b91b      	cbnz	r3, 8002e96 <_printf_i+0x15e>
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	f022 0220 	bic.w	r2, r2, #32
 8002e94:	6022      	str	r2, [r4, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	e7b7      	b.n	8002e0a <_printf_i+0xd2>
 8002e9a:	064d      	lsls	r5, r1, #25
 8002e9c:	bf48      	it	mi
 8002e9e:	b29b      	uxthmi	r3, r3
 8002ea0:	e7ef      	b.n	8002e82 <_printf_i+0x14a>
 8002ea2:	4665      	mov	r5, ip
 8002ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ea8:	fb02 3311 	mls	r3, r2, r1, r3
 8002eac:	5cc3      	ldrb	r3, [r0, r3]
 8002eae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	2900      	cmp	r1, #0
 8002eb6:	d1f5      	bne.n	8002ea4 <_printf_i+0x16c>
 8002eb8:	e7b9      	b.n	8002e2e <_printf_i+0xf6>
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	6825      	ldr	r5, [r4, #0]
 8002ebe:	6961      	ldr	r1, [r4, #20]
 8002ec0:	1d18      	adds	r0, r3, #4
 8002ec2:	6010      	str	r0, [r2, #0]
 8002ec4:	0628      	lsls	r0, r5, #24
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	d501      	bpl.n	8002ece <_printf_i+0x196>
 8002eca:	6019      	str	r1, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <_printf_i+0x19c>
 8002ece:	066a      	lsls	r2, r5, #25
 8002ed0:	d5fb      	bpl.n	8002eca <_printf_i+0x192>
 8002ed2:	8019      	strh	r1, [r3, #0]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6123      	str	r3, [r4, #16]
 8002ed8:	4665      	mov	r5, ip
 8002eda:	e7b9      	b.n	8002e50 <_printf_i+0x118>
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	1d19      	adds	r1, r3, #4
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	681d      	ldr	r5, [r3, #0]
 8002ee4:	6862      	ldr	r2, [r4, #4]
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f7fd f9b1 	bl	8000250 <memchr>
 8002eee:	b108      	cbz	r0, 8002ef4 <_printf_i+0x1bc>
 8002ef0:	1b40      	subs	r0, r0, r5
 8002ef2:	6060      	str	r0, [r4, #4]
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002efe:	e7a7      	b.n	8002e50 <_printf_i+0x118>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	462a      	mov	r2, r5
 8002f04:	4639      	mov	r1, r7
 8002f06:	4630      	mov	r0, r6
 8002f08:	47c0      	blx	r8
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d0aa      	beq.n	8002e64 <_printf_i+0x12c>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	079b      	lsls	r3, r3, #30
 8002f12:	d413      	bmi.n	8002f3c <_printf_i+0x204>
 8002f14:	68e0      	ldr	r0, [r4, #12]
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	4298      	cmp	r0, r3
 8002f1a:	bfb8      	it	lt
 8002f1c:	4618      	movlt	r0, r3
 8002f1e:	e7a3      	b.n	8002e68 <_printf_i+0x130>
 8002f20:	2301      	movs	r3, #1
 8002f22:	464a      	mov	r2, r9
 8002f24:	4639      	mov	r1, r7
 8002f26:	4630      	mov	r0, r6
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d09a      	beq.n	8002e64 <_printf_i+0x12c>
 8002f2e:	3501      	adds	r5, #1
 8002f30:	68e3      	ldr	r3, [r4, #12]
 8002f32:	9a03      	ldr	r2, [sp, #12]
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	42ab      	cmp	r3, r5
 8002f38:	dcf2      	bgt.n	8002f20 <_printf_i+0x1e8>
 8002f3a:	e7eb      	b.n	8002f14 <_printf_i+0x1dc>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	f104 0919 	add.w	r9, r4, #25
 8002f42:	e7f5      	b.n	8002f30 <_printf_i+0x1f8>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ac      	bne.n	8002ea2 <_printf_i+0x16a>
 8002f48:	7803      	ldrb	r3, [r0, #0]
 8002f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f52:	e76c      	b.n	8002e2e <_printf_i+0xf6>
 8002f54:	08003259 	.word	0x08003259
 8002f58:	0800326a 	.word	0x0800326a

08002f5c <_putc_r>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	460d      	mov	r5, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	4606      	mov	r6, r0
 8002f64:	b118      	cbz	r0, 8002f6e <_putc_r+0x12>
 8002f66:	6983      	ldr	r3, [r0, #24]
 8002f68:	b90b      	cbnz	r3, 8002f6e <_putc_r+0x12>
 8002f6a:	f7ff f8eb 	bl	8002144 <__sinit>
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <_putc_r+0x60>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d112      	bne.n	8002f9a <_putc_r+0x3e>
 8002f74:	6874      	ldr	r4, [r6, #4]
 8002f76:	68a3      	ldr	r3, [r4, #8]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	60a3      	str	r3, [r4, #8]
 8002f7e:	da16      	bge.n	8002fae <_putc_r+0x52>
 8002f80:	69a2      	ldr	r2, [r4, #24]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	db02      	blt.n	8002f8c <_putc_r+0x30>
 8002f86:	b2eb      	uxtb	r3, r5
 8002f88:	2b0a      	cmp	r3, #10
 8002f8a:	d110      	bne.n	8002fae <_putc_r+0x52>
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	4629      	mov	r1, r5
 8002f90:	4630      	mov	r0, r6
 8002f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f96:	f7ff bbb7 	b.w	8002708 <__swbuf_r>
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <_putc_r+0x64>)
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d101      	bne.n	8002fa4 <_putc_r+0x48>
 8002fa0:	68b4      	ldr	r4, [r6, #8]
 8002fa2:	e7e8      	b.n	8002f76 <_putc_r+0x1a>
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <_putc_r+0x68>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	bf08      	it	eq
 8002faa:	68f4      	ldreq	r4, [r6, #12]
 8002fac:	e7e3      	b.n	8002f76 <_putc_r+0x1a>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	6022      	str	r2, [r4, #0]
 8002fb4:	701d      	strb	r5, [r3, #0]
 8002fb6:	b2e8      	uxtb	r0, r5
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
 8002fba:	bf00      	nop
 8002fbc:	08003204 	.word	0x08003204
 8002fc0:	08003224 	.word	0x08003224
 8002fc4:	080031e4 	.word	0x080031e4

08002fc8 <_read_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4c07      	ldr	r4, [pc, #28]	; (8002fe8 <_read_r+0x20>)
 8002fcc:	4605      	mov	r5, r0
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f7fd fe4c 	bl	8000c74 <_read>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_read_r+0x1e>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_read_r+0x1e>
 8002fe4:	602b      	str	r3, [r5, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	20000104 	.word	0x20000104

08002fec <_fstat_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4c07      	ldr	r4, [pc, #28]	; (800300c <_fstat_r+0x20>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	f000 f821 	bl	8003040 <_fstat>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d102      	bne.n	8003008 <_fstat_r+0x1c>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	b103      	cbz	r3, 8003008 <_fstat_r+0x1c>
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	20000104 	.word	0x20000104

08003010 <_isatty_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4c06      	ldr	r4, [pc, #24]	; (800302c <_isatty_r+0x1c>)
 8003014:	2300      	movs	r3, #0
 8003016:	4605      	mov	r5, r0
 8003018:	4608      	mov	r0, r1
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	f000 f818 	bl	8003050 <_isatty>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_isatty_r+0x1a>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	b103      	cbz	r3, 800302a <_isatty_r+0x1a>
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000104 	.word	0x20000104

08003030 <_close>:
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <_close+0xc>)
 8003032:	2258      	movs	r2, #88	; 0x58
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f04f 30ff 	mov.w	r0, #4294967295
 800303a:	4770      	bx	lr
 800303c:	20000104 	.word	0x20000104

08003040 <_fstat>:
 8003040:	4b02      	ldr	r3, [pc, #8]	; (800304c <_fstat+0xc>)
 8003042:	2258      	movs	r2, #88	; 0x58
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f04f 30ff 	mov.w	r0, #4294967295
 800304a:	4770      	bx	lr
 800304c:	20000104 	.word	0x20000104

08003050 <_isatty>:
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <_isatty+0xc>)
 8003052:	2258      	movs	r2, #88	; 0x58
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	2000      	movs	r0, #0
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000104 	.word	0x20000104

08003060 <_lseek>:
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <_lseek+0xc>)
 8003062:	2258      	movs	r2, #88	; 0x58
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f04f 30ff 	mov.w	r0, #4294967295
 800306a:	4770      	bx	lr
 800306c:	20000104 	.word	0x20000104

08003070 <_sbrk>:
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <_sbrk+0x14>)
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	4602      	mov	r2, r0
 8003076:	b909      	cbnz	r1, 800307c <_sbrk+0xc>
 8003078:	4903      	ldr	r1, [pc, #12]	; (8003088 <_sbrk+0x18>)
 800307a:	6019      	str	r1, [r3, #0]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	4402      	add	r2, r0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	4770      	bx	lr
 8003084:	2000008c 	.word	0x2000008c
 8003088:	20000108 	.word	0x20000108

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
